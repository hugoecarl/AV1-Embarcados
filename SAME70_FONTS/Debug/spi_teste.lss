
spi_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d4c  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20400000  00402d4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002dc  20400454  004031a0  00020454  2**2
                  ALLOC
  3 .stack        00002000  20400730  0040347c  00020454  2**0
                  ALLOC
  4 .heap         00000200  20402730  0040547c  00020454  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020482  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016fb7  00000000  00000000  000204db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003391  00000000  00000000  00037492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005ae0  00000000  00000000  0003a823  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008a0  00000000  00000000  00040303  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e0  00000000  00000000  00040ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020afd  00000000  00000000  00041483  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e1c7  00000000  00000000  00061f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fb15  00000000  00000000  00070147  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000016d8  00000000  00000000  000ffc5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 27 40 20 65 11 40 00 61 11 40 00 61 11 40 00     0'@ e.@.a.@.a.@.
  400010:	61 11 40 00 61 11 40 00 61 11 40 00 00 00 00 00     a.@.a.@.a.@.....
	...
  40002c:	61 11 40 00 61 11 40 00 00 00 00 00 61 11 40 00     a.@.a.@.....a.@.
  40003c:	61 11 40 00 61 11 40 00 61 11 40 00 f9 13 40 00     a.@.a.@.a.@...@.
  40004c:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  40005c:	61 11 40 00 61 11 40 00 00 00 00 00 89 0f 40 00     a.@.a.@.......@.
  40006c:	9d 0f 40 00 b1 0f 40 00 61 11 40 00 61 11 40 00     ..@...@.a.@.a.@.
  40007c:	61 11 40 00 c5 0f 40 00 d9 0f 40 00 61 11 40 00     a.@...@...@.a.@.
  40008c:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  40009c:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  4000ac:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  4000bc:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  4000cc:	61 11 40 00 00 00 00 00 61 11 40 00 00 00 00 00     a.@.....a.@.....
  4000dc:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  4000ec:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  4000fc:	61 11 40 00 61 11 40 00 61 11 40 00 61 11 40 00     a.@.a.@.a.@.a.@.
  40010c:	61 11 40 00 61 11 40 00 00 00 00 00 00 00 00 00     a.@.a.@.........
  40011c:	00 00 00 00 61 11 40 00 61 11 40 00 61 11 40 00     ....a.@.a.@.a.@.
  40012c:	61 11 40 00 61 11 40 00 00 00 00 00 61 11 40 00     a.@.a.@.....a.@.
  40013c:	61 11 40 00                                         a.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400454 	.word	0x20400454
  40015c:	00000000 	.word	0x00000000
  400160:	00402d4c 	.word	0x00402d4c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402d4c 	.word	0x00402d4c
  4001a0:	20400458 	.word	0x20400458
  4001a4:	00402d4c 	.word	0x00402d4c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400344:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400346:	4d2a      	ldr	r5, [pc, #168]	; (4003f0 <rtc_set_date+0xac>)
  400348:	fba5 4603 	umull	r4, r6, r5, r3
  40034c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40034e:	9c03      	ldr	r4, [sp, #12]
  400350:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400352:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400356:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40035a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40035e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400362:	fba5 6402 	umull	r6, r4, r5, r2
  400366:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400368:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40036c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400370:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400378:	4b1e      	ldr	r3, [pc, #120]	; (4003f4 <rtc_set_date+0xb0>)
  40037a:	fba3 4301 	umull	r4, r3, r3, r1
  40037e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400380:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400384:	4b1c      	ldr	r3, [pc, #112]	; (4003f8 <rtc_set_date+0xb4>)
  400386:	fba3 4301 	umull	r4, r3, r3, r1
  40038a:	095b      	lsrs	r3, r3, #5
  40038c:	fba5 6403 	umull	r6, r4, r5, r3
  400390:	08e4      	lsrs	r4, r4, #3
  400392:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400396:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40039a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40039c:	fba5 4301 	umull	r4, r3, r5, r1
  4003a0:	08db      	lsrs	r3, r3, #3
  4003a2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4003a6:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4003ae:	fba5 1503 	umull	r1, r5, r5, r3
  4003b2:	08ed      	lsrs	r5, r5, #3
  4003b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4003b8:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003bc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4003c0:	6983      	ldr	r3, [r0, #24]
  4003c2:	f013 0f04 	tst.w	r3, #4
  4003c6:	d0fb      	beq.n	4003c0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4003c8:	6803      	ldr	r3, [r0, #0]
  4003ca:	f043 0302 	orr.w	r3, r3, #2
  4003ce:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4003d0:	6983      	ldr	r3, [r0, #24]
  4003d2:	f013 0f01 	tst.w	r3, #1
  4003d6:	d0fb      	beq.n	4003d0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4003d8:	2301      	movs	r3, #1
  4003da:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4003dc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4003de:	6803      	ldr	r3, [r0, #0]
  4003e0:	f023 0302 	bic.w	r3, r3, #2
  4003e4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4003e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003e8:	f000 0002 	and.w	r0, r0, #2
  4003ec:	bc70      	pop	{r4, r5, r6}
  4003ee:	4770      	bx	lr
  4003f0:	cccccccd 	.word	0xcccccccd
  4003f4:	10624dd3 	.word	0x10624dd3
  4003f8:	51eb851f 	.word	0x51eb851f

004003fc <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4003fc:	b430      	push	{r4, r5}
  4003fe:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400400:	460c      	mov	r4, r1
  400402:	b151      	cbz	r1, 40041a <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400404:	4c12      	ldr	r4, [pc, #72]	; (400450 <rtc_set_date_alarm+0x54>)
  400406:	fba4 1402 	umull	r1, r4, r4, r2
  40040a:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40040c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400410:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400414:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400416:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40041a:	b15b      	cbz	r3, 400434 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041c:	4a0c      	ldr	r2, [pc, #48]	; (400450 <rtc_set_date_alarm+0x54>)
  40041e:	fba2 3205 	umull	r3, r2, r2, r5
  400422:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400424:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  400428:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  40042c:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40042e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  400432:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  400434:	6942      	ldr	r2, [r0, #20]
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <rtc_set_date_alarm+0x58>)
  400438:	4013      	ands	r3, r2
  40043a:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  40043c:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  40043e:	6942      	ldr	r2, [r0, #20]
  400440:	4b05      	ldr	r3, [pc, #20]	; (400458 <rtc_set_date_alarm+0x5c>)
  400442:	4313      	orrs	r3, r2
  400444:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  400446:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400448:	f000 0008 	and.w	r0, r0, #8
  40044c:	bc30      	pop	{r4, r5}
  40044e:	4770      	bx	lr
  400450:	cccccccd 	.word	0xcccccccd
  400454:	7f7fffff 	.word	0x7f7fffff
  400458:	80800000 	.word	0x80800000

0040045c <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  40045c:	6980      	ldr	r0, [r0, #24]
}
  40045e:	4770      	bx	lr

00400460 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400460:	61c1      	str	r1, [r0, #28]
  400462:	4770      	bx	lr

00400464 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400464:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400466:	4b07      	ldr	r3, [pc, #28]	; (400484 <spi_enable_clock+0x20>)
  400468:	4298      	cmp	r0, r3
  40046a:	d003      	beq.n	400474 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40046c:	4b06      	ldr	r3, [pc, #24]	; (400488 <spi_enable_clock+0x24>)
  40046e:	4298      	cmp	r0, r3
  400470:	d004      	beq.n	40047c <spi_enable_clock+0x18>
  400472:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400474:	2015      	movs	r0, #21
  400476:	4b05      	ldr	r3, [pc, #20]	; (40048c <spi_enable_clock+0x28>)
  400478:	4798      	blx	r3
  40047a:	bd08      	pop	{r3, pc}
  40047c:	202a      	movs	r0, #42	; 0x2a
  40047e:	4b03      	ldr	r3, [pc, #12]	; (40048c <spi_enable_clock+0x28>)
  400480:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400482:	e7f6      	b.n	400472 <spi_enable_clock+0xe>
  400484:	40008000 	.word	0x40008000
  400488:	40058000 	.word	0x40058000
  40048c:	0040110d 	.word	0x0040110d

00400490 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400490:	6843      	ldr	r3, [r0, #4]
  400492:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400496:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400498:	6843      	ldr	r3, [r0, #4]
  40049a:	0409      	lsls	r1, r1, #16
  40049c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4004a0:	4319      	orrs	r1, r3
  4004a2:	6041      	str	r1, [r0, #4]
  4004a4:	4770      	bx	lr

004004a6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4004a6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4004a8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4004ac:	6905      	ldr	r5, [r0, #16]
  4004ae:	f015 0f02 	tst.w	r5, #2
  4004b2:	d103      	bne.n	4004bc <spi_write+0x16>
		if (!timeout--) {
  4004b4:	3c01      	subs	r4, #1
  4004b6:	d1f9      	bne.n	4004ac <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4004b8:	2001      	movs	r0, #1
  4004ba:	e00c      	b.n	4004d6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4004bc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4004be:	f014 0f02 	tst.w	r4, #2
  4004c2:	d006      	beq.n	4004d2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4004c4:	0412      	lsls	r2, r2, #16
  4004c6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4004ca:	4311      	orrs	r1, r2
		if (uc_last) {
  4004cc:	b10b      	cbz	r3, 4004d2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4004ce:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4004d2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4004d4:	2000      	movs	r0, #0
}
  4004d6:	bc30      	pop	{r4, r5}
  4004d8:	4770      	bx	lr

004004da <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4004da:	b932      	cbnz	r2, 4004ea <spi_set_clock_polarity+0x10>
  4004dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004e2:	f023 0301 	bic.w	r3, r3, #1
  4004e6:	6303      	str	r3, [r0, #48]	; 0x30
  4004e8:	4770      	bx	lr
  4004ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4004ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004f0:	f043 0301 	orr.w	r3, r3, #1
  4004f4:	6303      	str	r3, [r0, #48]	; 0x30
  4004f6:	4770      	bx	lr

004004f8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4004f8:	b932      	cbnz	r2, 400508 <spi_set_clock_phase+0x10>
  4004fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4004fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400500:	f023 0302 	bic.w	r3, r3, #2
  400504:	6303      	str	r3, [r0, #48]	; 0x30
  400506:	4770      	bx	lr
  400508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40050c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40050e:	f043 0302 	orr.w	r3, r3, #2
  400512:	6303      	str	r3, [r0, #48]	; 0x30
  400514:	4770      	bx	lr

00400516 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400516:	2a04      	cmp	r2, #4
  400518:	d003      	beq.n	400522 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40051a:	b16a      	cbz	r2, 400538 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40051c:	2a08      	cmp	r2, #8
  40051e:	d016      	beq.n	40054e <spi_configure_cs_behavior+0x38>
  400520:	4770      	bx	lr
  400522:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400526:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400528:	f023 0308 	bic.w	r3, r3, #8
  40052c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40052e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400530:	f043 0304 	orr.w	r3, r3, #4
  400534:	6303      	str	r3, [r0, #48]	; 0x30
  400536:	4770      	bx	lr
  400538:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40053c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40053e:	f023 0308 	bic.w	r3, r3, #8
  400542:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400544:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400546:	f023 0304 	bic.w	r3, r3, #4
  40054a:	6303      	str	r3, [r0, #48]	; 0x30
  40054c:	4770      	bx	lr
  40054e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400552:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400554:	f043 0308 	orr.w	r3, r3, #8
  400558:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40055a:	e7e1      	b.n	400520 <spi_configure_cs_behavior+0xa>

0040055c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40055c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400560:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400566:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400568:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40056a:	431a      	orrs	r2, r3
  40056c:	630a      	str	r2, [r1, #48]	; 0x30
  40056e:	4770      	bx	lr

00400570 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400570:	1e43      	subs	r3, r0, #1
  400572:	4419      	add	r1, r3
  400574:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400578:	1e43      	subs	r3, r0, #1
  40057a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40057c:	bf94      	ite	ls
  40057e:	b200      	sxthls	r0, r0
		return -1;
  400580:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400584:	4770      	bx	lr

00400586 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400586:	b17a      	cbz	r2, 4005a8 <spi_set_baudrate_div+0x22>
{
  400588:	b410      	push	{r4}
  40058a:	4614      	mov	r4, r2
  40058c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400590:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400596:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400598:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40059a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40059e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4005a0:	2000      	movs	r0, #0
}
  4005a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005a6:	4770      	bx	lr
        return -1;
  4005a8:	f04f 30ff 	mov.w	r0, #4294967295
  4005ac:	4770      	bx	lr
	...

004005b0 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4005b0:	4b01      	ldr	r3, [pc, #4]	; (4005b8 <gfx_mono_set_framebuffer+0x8>)
  4005b2:	6018      	str	r0, [r3, #0]
  4005b4:	4770      	bx	lr
  4005b6:	bf00      	nop
  4005b8:	20400470 	.word	0x20400470

004005bc <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4005bc:	4b02      	ldr	r3, [pc, #8]	; (4005c8 <gfx_mono_framebuffer_put_byte+0xc>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4005c4:	5442      	strb	r2, [r0, r1]
  4005c6:	4770      	bx	lr
  4005c8:	20400470 	.word	0x20400470

004005cc <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4005cc:	4b02      	ldr	r3, [pc, #8]	; (4005d8 <gfx_mono_framebuffer_get_byte+0xc>)
  4005ce:	681b      	ldr	r3, [r3, #0]
  4005d0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4005d4:	5c40      	ldrb	r0, [r0, r1]
  4005d6:	4770      	bx	lr
  4005d8:	20400470 	.word	0x20400470

004005dc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4005e0:	1884      	adds	r4, r0, r2
  4005e2:	2c80      	cmp	r4, #128	; 0x80
  4005e4:	dd02      	ble.n	4005ec <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4005e6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4005ea:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4005ec:	b322      	cbz	r2, 400638 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4005ee:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4005f0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4005f4:	2601      	movs	r6, #1
  4005f6:	fa06 f101 	lsl.w	r1, r6, r1
  4005fa:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4005fc:	2b01      	cmp	r3, #1
  4005fe:	d01d      	beq.n	40063c <gfx_mono_generic_draw_horizontal_line+0x60>
  400600:	2b00      	cmp	r3, #0
  400602:	d035      	beq.n	400670 <gfx_mono_generic_draw_horizontal_line+0x94>
  400604:	2b02      	cmp	r3, #2
  400606:	d117      	bne.n	400638 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400608:	3801      	subs	r0, #1
  40060a:	b2c7      	uxtb	r7, r0
  40060c:	19d4      	adds	r4, r2, r7
  40060e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400610:	f8df a090 	ldr.w	sl, [pc, #144]	; 4006a4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400614:	f04f 0900 	mov.w	r9, #0
  400618:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4006a8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40061c:	4621      	mov	r1, r4
  40061e:	4628      	mov	r0, r5
  400620:	47d0      	blx	sl
			temp ^= pixelmask;
  400622:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400626:	464b      	mov	r3, r9
  400628:	b2d2      	uxtb	r2, r2
  40062a:	4621      	mov	r1, r4
  40062c:	4628      	mov	r0, r5
  40062e:	47c0      	blx	r8
  400630:	3c01      	subs	r4, #1
  400632:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400634:	42bc      	cmp	r4, r7
  400636:	d1f1      	bne.n	40061c <gfx_mono_generic_draw_horizontal_line+0x40>
  400638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40063c:	3801      	subs	r0, #1
  40063e:	b2c7      	uxtb	r7, r0
  400640:	19d4      	adds	r4, r2, r7
  400642:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400644:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4006a4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400648:	f04f 0900 	mov.w	r9, #0
  40064c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4006a8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400650:	4621      	mov	r1, r4
  400652:	4628      	mov	r0, r5
  400654:	47d0      	blx	sl
			temp |= pixelmask;
  400656:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40065a:	464b      	mov	r3, r9
  40065c:	b2d2      	uxtb	r2, r2
  40065e:	4621      	mov	r1, r4
  400660:	4628      	mov	r0, r5
  400662:	47c0      	blx	r8
  400664:	3c01      	subs	r4, #1
  400666:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400668:	42bc      	cmp	r4, r7
  40066a:	d1f1      	bne.n	400650 <gfx_mono_generic_draw_horizontal_line+0x74>
  40066c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400670:	3801      	subs	r0, #1
  400672:	b2c7      	uxtb	r7, r0
  400674:	19d4      	adds	r4, r2, r7
  400676:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400678:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4006a4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40067c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40067e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4006a8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400682:	4621      	mov	r1, r4
  400684:	4628      	mov	r0, r5
  400686:	47c0      	blx	r8
			temp &= ~pixelmask;
  400688:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40068c:	2300      	movs	r3, #0
  40068e:	b2d2      	uxtb	r2, r2
  400690:	4621      	mov	r1, r4
  400692:	4628      	mov	r0, r5
  400694:	47c8      	blx	r9
  400696:	3c01      	subs	r4, #1
  400698:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40069a:	42bc      	cmp	r4, r7
  40069c:	d1f1      	bne.n	400682 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006a2:	bf00      	nop
  4006a4:	004008dd 	.word	0x004008dd
  4006a8:	004007d9 	.word	0x004007d9

004006ac <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4006ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006b0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4006b4:	b18b      	cbz	r3, 4006da <gfx_mono_generic_draw_filled_rect+0x2e>
  4006b6:	461c      	mov	r4, r3
  4006b8:	4690      	mov	r8, r2
  4006ba:	4606      	mov	r6, r0
  4006bc:	1e4d      	subs	r5, r1, #1
  4006be:	b2ed      	uxtb	r5, r5
  4006c0:	442c      	add	r4, r5
  4006c2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4006c4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4006e0 <gfx_mono_generic_draw_filled_rect+0x34>
  4006c8:	463b      	mov	r3, r7
  4006ca:	4642      	mov	r2, r8
  4006cc:	4621      	mov	r1, r4
  4006ce:	4630      	mov	r0, r6
  4006d0:	47c8      	blx	r9
  4006d2:	3c01      	subs	r4, #1
  4006d4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4006d6:	42ac      	cmp	r4, r5
  4006d8:	d1f6      	bne.n	4006c8 <gfx_mono_generic_draw_filled_rect+0x1c>
  4006da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006de:	bf00      	nop
  4006e0:	004005dd 	.word	0x004005dd

004006e4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4006e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006e8:	b083      	sub	sp, #12
  4006ea:	4604      	mov	r4, r0
  4006ec:	4688      	mov	r8, r1
  4006ee:	4691      	mov	r9, r2
  4006f0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4006f2:	7a5b      	ldrb	r3, [r3, #9]
  4006f4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4006f8:	2100      	movs	r1, #0
  4006fa:	9100      	str	r1, [sp, #0]
  4006fc:	4649      	mov	r1, r9
  4006fe:	4640      	mov	r0, r8
  400700:	4d21      	ldr	r5, [pc, #132]	; (400788 <gfx_mono_draw_char+0xa4>)
  400702:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400704:	f89b 3000 	ldrb.w	r3, [fp]
  400708:	b113      	cbz	r3, 400710 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40070a:	b003      	add	sp, #12
  40070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400710:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400714:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400716:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40071a:	bf18      	it	ne
  40071c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40071e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400722:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400726:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400728:	fb17 f70a 	smulbb	r7, r7, sl
  40072c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400730:	f8db 3004 	ldr.w	r3, [fp, #4]
  400734:	fa13 f787 	uxtah	r7, r3, r7
  400738:	e01f      	b.n	40077a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40073a:	0064      	lsls	r4, r4, #1
  40073c:	b2e4      	uxtb	r4, r4
  40073e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400740:	b2eb      	uxtb	r3, r5
  400742:	429e      	cmp	r6, r3
  400744:	d910      	bls.n	400768 <gfx_mono_draw_char+0x84>
  400746:	b2eb      	uxtb	r3, r5
  400748:	eb08 0003 	add.w	r0, r8, r3
  40074c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40074e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400752:	bf08      	it	eq
  400754:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400758:	f014 0f80 	tst.w	r4, #128	; 0x80
  40075c:	d0ed      	beq.n	40073a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40075e:	2201      	movs	r2, #1
  400760:	4649      	mov	r1, r9
  400762:	4b0a      	ldr	r3, [pc, #40]	; (40078c <gfx_mono_draw_char+0xa8>)
  400764:	4798      	blx	r3
  400766:	e7e8      	b.n	40073a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400768:	f109 0901 	add.w	r9, r9, #1
  40076c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400770:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400774:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400778:	d0c7      	beq.n	40070a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40077a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40077e:	2e00      	cmp	r6, #0
  400780:	d0f2      	beq.n	400768 <gfx_mono_draw_char+0x84>
  400782:	2500      	movs	r5, #0
  400784:	462c      	mov	r4, r5
  400786:	e7de      	b.n	400746 <gfx_mono_draw_char+0x62>
  400788:	004006ad 	.word	0x004006ad
  40078c:	00400879 	.word	0x00400879

00400790 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400794:	4604      	mov	r4, r0
  400796:	4690      	mov	r8, r2
  400798:	461d      	mov	r5, r3
  40079a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40079c:	4f0d      	ldr	r7, [pc, #52]	; (4007d4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40079e:	460e      	mov	r6, r1
  4007a0:	e008      	b.n	4007b4 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4007a2:	7a6a      	ldrb	r2, [r5, #9]
  4007a4:	3201      	adds	r2, #1
  4007a6:	4442      	add	r2, r8
  4007a8:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4007ac:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4007ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4007b2:	b16b      	cbz	r3, 4007d0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4007b4:	7820      	ldrb	r0, [r4, #0]
  4007b6:	280a      	cmp	r0, #10
  4007b8:	d0f3      	beq.n	4007a2 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4007ba:	280d      	cmp	r0, #13
  4007bc:	d0f7      	beq.n	4007ae <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4007be:	462b      	mov	r3, r5
  4007c0:	4642      	mov	r2, r8
  4007c2:	4649      	mov	r1, r9
  4007c4:	47b8      	blx	r7
			x += font->width;
  4007c6:	7a2b      	ldrb	r3, [r5, #8]
  4007c8:	4499      	add	r9, r3
  4007ca:	fa5f f989 	uxtb.w	r9, r9
  4007ce:	e7ee      	b.n	4007ae <gfx_mono_draw_string+0x1e>
}
  4007d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007d4:	004006e5 	.word	0x004006e5

004007d8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4007d8:	b570      	push	{r4, r5, r6, lr}
  4007da:	4604      	mov	r4, r0
  4007dc:	460d      	mov	r5, r1
  4007de:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4007e0:	b91b      	cbnz	r3, 4007ea <gfx_mono_ssd1306_put_byte+0x12>
  4007e2:	4b0d      	ldr	r3, [pc, #52]	; (400818 <gfx_mono_ssd1306_put_byte+0x40>)
  4007e4:	4798      	blx	r3
  4007e6:	42b0      	cmp	r0, r6
  4007e8:	d015      	beq.n	400816 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4007ea:	4632      	mov	r2, r6
  4007ec:	4629      	mov	r1, r5
  4007ee:	4620      	mov	r0, r4
  4007f0:	4b0a      	ldr	r3, [pc, #40]	; (40081c <gfx_mono_ssd1306_put_byte+0x44>)
  4007f2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4007f4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4007f8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4007fc:	4c08      	ldr	r4, [pc, #32]	; (400820 <gfx_mono_ssd1306_put_byte+0x48>)
  4007fe:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400800:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400804:	f040 0010 	orr.w	r0, r0, #16
  400808:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40080a:	f005 000f 	and.w	r0, r5, #15
  40080e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400810:	4630      	mov	r0, r6
  400812:	4b04      	ldr	r3, [pc, #16]	; (400824 <gfx_mono_ssd1306_put_byte+0x4c>)
  400814:	4798      	blx	r3
  400816:	bd70      	pop	{r4, r5, r6, pc}
  400818:	004005cd 	.word	0x004005cd
  40081c:	004005bd 	.word	0x004005bd
  400820:	004008e9 	.word	0x004008e9
  400824:	00400b09 	.word	0x00400b09

00400828 <gfx_mono_ssd1306_init>:
{
  400828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40082c:	480d      	ldr	r0, [pc, #52]	; (400864 <gfx_mono_ssd1306_init+0x3c>)
  40082e:	4b0e      	ldr	r3, [pc, #56]	; (400868 <gfx_mono_ssd1306_init+0x40>)
  400830:	4798      	blx	r3
	ssd1306_init();
  400832:	4b0e      	ldr	r3, [pc, #56]	; (40086c <gfx_mono_ssd1306_init+0x44>)
  400834:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400836:	2040      	movs	r0, #64	; 0x40
  400838:	4b0d      	ldr	r3, [pc, #52]	; (400870 <gfx_mono_ssd1306_init+0x48>)
  40083a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40083c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40083e:	f04f 0801 	mov.w	r8, #1
  400842:	462f      	mov	r7, r5
  400844:	4e0b      	ldr	r6, [pc, #44]	; (400874 <gfx_mono_ssd1306_init+0x4c>)
{
  400846:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400848:	4643      	mov	r3, r8
  40084a:	463a      	mov	r2, r7
  40084c:	b2e1      	uxtb	r1, r4
  40084e:	4628      	mov	r0, r5
  400850:	47b0      	blx	r6
  400852:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400854:	2c80      	cmp	r4, #128	; 0x80
  400856:	d1f7      	bne.n	400848 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400858:	3501      	adds	r5, #1
  40085a:	b2ed      	uxtb	r5, r5
  40085c:	2d04      	cmp	r5, #4
  40085e:	d1f2      	bne.n	400846 <gfx_mono_ssd1306_init+0x1e>
  400860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400864:	20400474 	.word	0x20400474
  400868:	004005b1 	.word	0x004005b1
  40086c:	00400929 	.word	0x00400929
  400870:	004008e9 	.word	0x004008e9
  400874:	004007d9 	.word	0x004007d9

00400878 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400878:	09c3      	lsrs	r3, r0, #7
  40087a:	d12a      	bne.n	4008d2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  40087c:	291f      	cmp	r1, #31
  40087e:	d828      	bhi.n	4008d2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400884:	4614      	mov	r4, r2
  400886:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400888:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40088a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  40088e:	2201      	movs	r2, #1
  400890:	fa02 f701 	lsl.w	r7, r2, r1
  400894:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400898:	4601      	mov	r1, r0
  40089a:	4630      	mov	r0, r6
  40089c:	4b0d      	ldr	r3, [pc, #52]	; (4008d4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40089e:	4798      	blx	r3
  4008a0:	4602      	mov	r2, r0
	switch (color) {
  4008a2:	2c01      	cmp	r4, #1
  4008a4:	d009      	beq.n	4008ba <gfx_mono_ssd1306_draw_pixel+0x42>
  4008a6:	b164      	cbz	r4, 4008c2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4008a8:	2c02      	cmp	r4, #2
  4008aa:	d00e      	beq.n	4008ca <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4008ac:	2300      	movs	r3, #0
  4008ae:	4629      	mov	r1, r5
  4008b0:	4630      	mov	r0, r6
  4008b2:	4c09      	ldr	r4, [pc, #36]	; (4008d8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4008b4:	47a0      	blx	r4
  4008b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4008ba:	ea48 0200 	orr.w	r2, r8, r0
  4008be:	b2d2      	uxtb	r2, r2
		break;
  4008c0:	e7f4      	b.n	4008ac <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4008c2:	ea20 0207 	bic.w	r2, r0, r7
  4008c6:	b2d2      	uxtb	r2, r2
		break;
  4008c8:	e7f0      	b.n	4008ac <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4008ca:	ea88 0200 	eor.w	r2, r8, r0
  4008ce:	b2d2      	uxtb	r2, r2
		break;
  4008d0:	e7ec      	b.n	4008ac <gfx_mono_ssd1306_draw_pixel+0x34>
  4008d2:	4770      	bx	lr
  4008d4:	004005cd 	.word	0x004005cd
  4008d8:	004007d9 	.word	0x004007d9

004008dc <gfx_mono_ssd1306_get_byte>:
{
  4008dc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4008de:	4b01      	ldr	r3, [pc, #4]	; (4008e4 <gfx_mono_ssd1306_get_byte+0x8>)
  4008e0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4008e2:	bd08      	pop	{r3, pc}
  4008e4:	004005cd 	.word	0x004005cd

004008e8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4008e8:	b538      	push	{r3, r4, r5, lr}
  4008ea:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4008ec:	2208      	movs	r2, #8
  4008ee:	4b09      	ldr	r3, [pc, #36]	; (400914 <ssd1306_write_command+0x2c>)
  4008f0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4008f2:	4c09      	ldr	r4, [pc, #36]	; (400918 <ssd1306_write_command+0x30>)
  4008f4:	2101      	movs	r1, #1
  4008f6:	4620      	mov	r0, r4
  4008f8:	4b08      	ldr	r3, [pc, #32]	; (40091c <ssd1306_write_command+0x34>)
  4008fa:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4008fc:	2301      	movs	r3, #1
  4008fe:	461a      	mov	r2, r3
  400900:	4629      	mov	r1, r5
  400902:	4620      	mov	r0, r4
  400904:	4c06      	ldr	r4, [pc, #24]	; (400920 <ssd1306_write_command+0x38>)
  400906:	47a0      	blx	r4
	delay_us(10);
  400908:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40090c:	4b05      	ldr	r3, [pc, #20]	; (400924 <ssd1306_write_command+0x3c>)
  40090e:	4798      	blx	r3
  400910:	bd38      	pop	{r3, r4, r5, pc}
  400912:	bf00      	nop
  400914:	400e1000 	.word	0x400e1000
  400918:	40008000 	.word	0x40008000
  40091c:	00400491 	.word	0x00400491
  400920:	004004a7 	.word	0x004004a7
  400924:	20400001 	.word	0x20400001

00400928 <ssd1306_init>:
{
  400928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40092c:	4d66      	ldr	r5, [pc, #408]	; (400ac8 <ssd1306_init+0x1a0>)
  40092e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400932:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400934:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400938:	4b64      	ldr	r3, [pc, #400]	; (400acc <ssd1306_init+0x1a4>)
  40093a:	2708      	movs	r7, #8
  40093c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40093e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400942:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400944:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400948:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40094a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40094c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400950:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400952:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400956:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400958:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40095a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40095e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400960:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400962:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400966:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400968:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40096a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40096e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400970:	f022 0208 	bic.w	r2, r2, #8
  400974:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400976:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400978:	f022 0208 	bic.w	r2, r2, #8
  40097c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40097e:	601f      	str	r7, [r3, #0]
  400980:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400982:	631f      	str	r7, [r3, #48]	; 0x30
  400984:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400986:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b04 <ssd1306_init+0x1dc>
  40098a:	2300      	movs	r3, #0
  40098c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400990:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400994:	4640      	mov	r0, r8
  400996:	4c4e      	ldr	r4, [pc, #312]	; (400ad0 <ssd1306_init+0x1a8>)
  400998:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40099a:	2300      	movs	r3, #0
  40099c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009a4:	4640      	mov	r0, r8
  4009a6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4009a8:	2300      	movs	r3, #0
  4009aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009b2:	4640      	mov	r0, r8
  4009b4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009b6:	2300      	movs	r3, #0
  4009b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4009bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009c0:	4640      	mov	r0, r8
  4009c2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4009c4:	2300      	movs	r3, #0
  4009c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009ce:	4640      	mov	r0, r8
  4009d0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4009d2:	2300      	movs	r3, #0
  4009d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009dc:	4640      	mov	r0, r8
  4009de:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4009e0:	4c3c      	ldr	r4, [pc, #240]	; (400ad4 <ssd1306_init+0x1ac>)
  4009e2:	f04f 0902 	mov.w	r9, #2
  4009e6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4009ea:	f04f 0880 	mov.w	r8, #128	; 0x80
  4009ee:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4009f2:	6863      	ldr	r3, [r4, #4]
  4009f4:	f043 0301 	orr.w	r3, r3, #1
  4009f8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4009fa:	463a      	mov	r2, r7
  4009fc:	2101      	movs	r1, #1
  4009fe:	4620      	mov	r0, r4
  400a00:	4b35      	ldr	r3, [pc, #212]	; (400ad8 <ssd1306_init+0x1b0>)
  400a02:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a04:	2200      	movs	r2, #0
  400a06:	2101      	movs	r1, #1
  400a08:	4620      	mov	r0, r4
  400a0a:	4b34      	ldr	r3, [pc, #208]	; (400adc <ssd1306_init+0x1b4>)
  400a0c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a0e:	2200      	movs	r2, #0
  400a10:	2101      	movs	r1, #1
  400a12:	4620      	mov	r0, r4
  400a14:	4b32      	ldr	r3, [pc, #200]	; (400ae0 <ssd1306_init+0x1b8>)
  400a16:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a18:	6863      	ldr	r3, [r4, #4]
  400a1a:	f023 0302 	bic.w	r3, r3, #2
  400a1e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a20:	2200      	movs	r2, #0
  400a22:	2101      	movs	r1, #1
  400a24:	4620      	mov	r0, r4
  400a26:	4b2f      	ldr	r3, [pc, #188]	; (400ae4 <ssd1306_init+0x1bc>)
  400a28:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400a2a:	6863      	ldr	r3, [r4, #4]
  400a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400a30:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400a32:	6863      	ldr	r3, [r4, #4]
  400a34:	f043 0310 	orr.w	r3, r3, #16
  400a38:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400a3a:	492b      	ldr	r1, [pc, #172]	; (400ae8 <ssd1306_init+0x1c0>)
  400a3c:	482b      	ldr	r0, [pc, #172]	; (400aec <ssd1306_init+0x1c4>)
  400a3e:	4b2c      	ldr	r3, [pc, #176]	; (400af0 <ssd1306_init+0x1c8>)
  400a40:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400a42:	b2c2      	uxtb	r2, r0
  400a44:	2101      	movs	r1, #1
  400a46:	4620      	mov	r0, r4
  400a48:	4b2a      	ldr	r3, [pc, #168]	; (400af4 <ssd1306_init+0x1cc>)
  400a4a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400a4c:	4620      	mov	r0, r4
  400a4e:	4b2a      	ldr	r3, [pc, #168]	; (400af8 <ssd1306_init+0x1d0>)
  400a50:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400a52:	2301      	movs	r3, #1
  400a54:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a56:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400a58:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400a5c:	4c27      	ldr	r4, [pc, #156]	; (400afc <ssd1306_init+0x1d4>)
  400a5e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a60:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400a62:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400a66:	47a0      	blx	r4
  400a68:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400a6a:	20a8      	movs	r0, #168	; 0xa8
  400a6c:	4c24      	ldr	r4, [pc, #144]	; (400b00 <ssd1306_init+0x1d8>)
  400a6e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400a70:	201f      	movs	r0, #31
  400a72:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400a74:	20d3      	movs	r0, #211	; 0xd3
  400a76:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400a78:	2000      	movs	r0, #0
  400a7a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400a7c:	2040      	movs	r0, #64	; 0x40
  400a7e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400a80:	20a1      	movs	r0, #161	; 0xa1
  400a82:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400a84:	20c8      	movs	r0, #200	; 0xc8
  400a86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400a88:	20da      	movs	r0, #218	; 0xda
  400a8a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400a8c:	4648      	mov	r0, r9
  400a8e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400a90:	2081      	movs	r0, #129	; 0x81
  400a92:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400a94:	208f      	movs	r0, #143	; 0x8f
  400a96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400a98:	20a4      	movs	r0, #164	; 0xa4
  400a9a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400a9c:	20a6      	movs	r0, #166	; 0xa6
  400a9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400aa0:	20d5      	movs	r0, #213	; 0xd5
  400aa2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400aa4:	4640      	mov	r0, r8
  400aa6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400aa8:	208d      	movs	r0, #141	; 0x8d
  400aaa:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400aac:	2014      	movs	r0, #20
  400aae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400ab0:	20db      	movs	r0, #219	; 0xdb
  400ab2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400ab4:	2040      	movs	r0, #64	; 0x40
  400ab6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400ab8:	20d9      	movs	r0, #217	; 0xd9
  400aba:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400abc:	20f1      	movs	r0, #241	; 0xf1
  400abe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ac0:	20af      	movs	r0, #175	; 0xaf
  400ac2:	47a0      	blx	r4
  400ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ac8:	400e1200 	.word	0x400e1200
  400acc:	400e1000 	.word	0x400e1000
  400ad0:	00400df9 	.word	0x00400df9
  400ad4:	40008000 	.word	0x40008000
  400ad8:	00400517 	.word	0x00400517
  400adc:	004004db 	.word	0x004004db
  400ae0:	004004f9 	.word	0x004004f9
  400ae4:	0040055d 	.word	0x0040055d
  400ae8:	08f0d180 	.word	0x08f0d180
  400aec:	000f4240 	.word	0x000f4240
  400af0:	00400571 	.word	0x00400571
  400af4:	00400587 	.word	0x00400587
  400af8:	00400465 	.word	0x00400465
  400afc:	20400001 	.word	0x20400001
  400b00:	004008e9 	.word	0x004008e9
  400b04:	400e1400 	.word	0x400e1400

00400b08 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b08:	b538      	push	{r3, r4, r5, lr}
  400b0a:	4605      	mov	r5, r0
  400b0c:	2208      	movs	r2, #8
  400b0e:	4b09      	ldr	r3, [pc, #36]	; (400b34 <ssd1306_write_data+0x2c>)
  400b10:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b12:	4c09      	ldr	r4, [pc, #36]	; (400b38 <ssd1306_write_data+0x30>)
  400b14:	2101      	movs	r1, #1
  400b16:	4620      	mov	r0, r4
  400b18:	4b08      	ldr	r3, [pc, #32]	; (400b3c <ssd1306_write_data+0x34>)
  400b1a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b1c:	2301      	movs	r3, #1
  400b1e:	461a      	mov	r2, r3
  400b20:	4629      	mov	r1, r5
  400b22:	4620      	mov	r0, r4
  400b24:	4c06      	ldr	r4, [pc, #24]	; (400b40 <ssd1306_write_data+0x38>)
  400b26:	47a0      	blx	r4
	delay_us(10);
  400b28:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400b2c:	4b05      	ldr	r3, [pc, #20]	; (400b44 <ssd1306_write_data+0x3c>)
  400b2e:	4798      	blx	r3
  400b30:	bd38      	pop	{r3, r4, r5, pc}
  400b32:	bf00      	nop
  400b34:	400e1000 	.word	0x400e1000
  400b38:	40008000 	.word	0x40008000
  400b3c:	00400491 	.word	0x00400491
  400b40:	004004a7 	.word	0x004004a7
  400b44:	20400001 	.word	0x20400001

00400b48 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400b48:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400b4a:	4810      	ldr	r0, [pc, #64]	; (400b8c <sysclk_init+0x44>)
  400b4c:	4b10      	ldr	r3, [pc, #64]	; (400b90 <sysclk_init+0x48>)
  400b4e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400b50:	213e      	movs	r1, #62	; 0x3e
  400b52:	2000      	movs	r0, #0
  400b54:	4b0f      	ldr	r3, [pc, #60]	; (400b94 <sysclk_init+0x4c>)
  400b56:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400b58:	4c0f      	ldr	r4, [pc, #60]	; (400b98 <sysclk_init+0x50>)
  400b5a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400b5c:	2800      	cmp	r0, #0
  400b5e:	d0fc      	beq.n	400b5a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400b60:	4b0e      	ldr	r3, [pc, #56]	; (400b9c <sysclk_init+0x54>)
  400b62:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b64:	4a0e      	ldr	r2, [pc, #56]	; (400ba0 <sysclk_init+0x58>)
  400b66:	4b0f      	ldr	r3, [pc, #60]	; (400ba4 <sysclk_init+0x5c>)
  400b68:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400b6a:	4c0f      	ldr	r4, [pc, #60]	; (400ba8 <sysclk_init+0x60>)
  400b6c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b6e:	2800      	cmp	r0, #0
  400b70:	d0fc      	beq.n	400b6c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400b72:	2002      	movs	r0, #2
  400b74:	4b0d      	ldr	r3, [pc, #52]	; (400bac <sysclk_init+0x64>)
  400b76:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400b78:	2000      	movs	r0, #0
  400b7a:	4b0d      	ldr	r3, [pc, #52]	; (400bb0 <sysclk_init+0x68>)
  400b7c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400b7e:	4b0d      	ldr	r3, [pc, #52]	; (400bb4 <sysclk_init+0x6c>)
  400b80:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400b82:	4802      	ldr	r0, [pc, #8]	; (400b8c <sysclk_init+0x44>)
  400b84:	4b02      	ldr	r3, [pc, #8]	; (400b90 <sysclk_init+0x48>)
  400b86:	4798      	blx	r3
  400b88:	bd10      	pop	{r4, pc}
  400b8a:	bf00      	nop
  400b8c:	11e1a300 	.word	0x11e1a300
  400b90:	00401339 	.word	0x00401339
  400b94:	00401089 	.word	0x00401089
  400b98:	004010dd 	.word	0x004010dd
  400b9c:	004010ed 	.word	0x004010ed
  400ba0:	20183f01 	.word	0x20183f01
  400ba4:	400e0600 	.word	0x400e0600
  400ba8:	004010fd 	.word	0x004010fd
  400bac:	00400fed 	.word	0x00400fed
  400bb0:	00401025 	.word	0x00401025
  400bb4:	0040122d 	.word	0x0040122d

00400bb8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400bba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bbe:	4b48      	ldr	r3, [pc, #288]	; (400ce0 <board_init+0x128>)
  400bc0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bc6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400bca:	4b46      	ldr	r3, [pc, #280]	; (400ce4 <board_init+0x12c>)
  400bcc:	2200      	movs	r2, #0
  400bce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400bd2:	695a      	ldr	r2, [r3, #20]
  400bd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400bd8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bde:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400be2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400be6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400bea:	f007 0007 	and.w	r0, r7, #7
  400bee:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400bf0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400bf4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400bf8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400bfc:	f3bf 8f4f 	dsb	sy
  400c00:	f04f 34ff 	mov.w	r4, #4294967295
  400c04:	fa04 fc00 	lsl.w	ip, r4, r0
  400c08:	fa06 f000 	lsl.w	r0, r6, r0
  400c0c:	fa04 f40e 	lsl.w	r4, r4, lr
  400c10:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400c14:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400c16:	463a      	mov	r2, r7
  400c18:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400c1a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400c1e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400c22:	3a01      	subs	r2, #1
  400c24:	4423      	add	r3, r4
  400c26:	f1b2 3fff 	cmp.w	r2, #4294967295
  400c2a:	d1f6      	bne.n	400c1a <board_init+0x62>
        } while(sets--);
  400c2c:	3e01      	subs	r6, #1
  400c2e:	4460      	add	r0, ip
  400c30:	f1b6 3fff 	cmp.w	r6, #4294967295
  400c34:	d1ef      	bne.n	400c16 <board_init+0x5e>
  400c36:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400c3a:	4b2a      	ldr	r3, [pc, #168]	; (400ce4 <board_init+0x12c>)
  400c3c:	695a      	ldr	r2, [r3, #20]
  400c3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400c42:	615a      	str	r2, [r3, #20]
  400c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c48:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c4c:	4a26      	ldr	r2, [pc, #152]	; (400ce8 <board_init+0x130>)
  400c4e:	4927      	ldr	r1, [pc, #156]	; (400cec <board_init+0x134>)
  400c50:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c52:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400c56:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c5c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400c60:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400c64:	f022 0201 	bic.w	r2, r2, #1
  400c68:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400c6c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400c70:	f022 0201 	bic.w	r2, r2, #1
  400c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400c78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c7c:	f3bf 8f6f 	isb	sy
  400c80:	200a      	movs	r0, #10
  400c82:	4c1b      	ldr	r4, [pc, #108]	; (400cf0 <board_init+0x138>)
  400c84:	47a0      	blx	r4
  400c86:	200b      	movs	r0, #11
  400c88:	47a0      	blx	r4
  400c8a:	200c      	movs	r0, #12
  400c8c:	47a0      	blx	r4
  400c8e:	2010      	movs	r0, #16
  400c90:	47a0      	blx	r4
  400c92:	2011      	movs	r0, #17
  400c94:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c96:	4b17      	ldr	r3, [pc, #92]	; (400cf4 <board_init+0x13c>)
  400c98:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c9c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ca2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ca4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400cac:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400cb2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cb8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400cba:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400cc2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400cc6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cc8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400cca:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400cce:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400cd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400cd4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400cd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400cde:	bf00      	nop
  400ce0:	400e1850 	.word	0x400e1850
  400ce4:	e000ed00 	.word	0xe000ed00
  400ce8:	400e0c00 	.word	0x400e0c00
  400cec:	5a00080c 	.word	0x5a00080c
  400cf0:	0040110d 	.word	0x0040110d
  400cf4:	400e1200 	.word	0x400e1200

00400cf8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cf8:	b90a      	cbnz	r2, 400cfe <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cfa:	6601      	str	r1, [r0, #96]	; 0x60
  400cfc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400cfe:	6641      	str	r1, [r0, #100]	; 0x64
  400d00:	4770      	bx	lr

00400d02 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400d02:	6301      	str	r1, [r0, #48]	; 0x30
  400d04:	4770      	bx	lr

00400d06 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d06:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d08:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d0c:	d03a      	beq.n	400d84 <pio_set_peripheral+0x7e>
  400d0e:	d813      	bhi.n	400d38 <pio_set_peripheral+0x32>
  400d10:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d14:	d025      	beq.n	400d62 <pio_set_peripheral+0x5c>
  400d16:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d1a:	d10a      	bne.n	400d32 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d1c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d1e:	4313      	orrs	r3, r2
  400d20:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d22:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d24:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d26:	400b      	ands	r3, r1
  400d28:	ea23 0302 	bic.w	r3, r3, r2
  400d2c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d2e:	6042      	str	r2, [r0, #4]
  400d30:	4770      	bx	lr
	switch (ul_type) {
  400d32:	2900      	cmp	r1, #0
  400d34:	d1fb      	bne.n	400d2e <pio_set_peripheral+0x28>
  400d36:	4770      	bx	lr
  400d38:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d3c:	d021      	beq.n	400d82 <pio_set_peripheral+0x7c>
  400d3e:	d809      	bhi.n	400d54 <pio_set_peripheral+0x4e>
  400d40:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d44:	d1f3      	bne.n	400d2e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d46:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d48:	4313      	orrs	r3, r2
  400d4a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d4e:	4313      	orrs	r3, r2
  400d50:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d52:	e7ec      	b.n	400d2e <pio_set_peripheral+0x28>
	switch (ul_type) {
  400d54:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d58:	d013      	beq.n	400d82 <pio_set_peripheral+0x7c>
  400d5a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d5e:	d010      	beq.n	400d82 <pio_set_peripheral+0x7c>
  400d60:	e7e5      	b.n	400d2e <pio_set_peripheral+0x28>
{
  400d62:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d64:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d66:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400d68:	43d3      	mvns	r3, r2
  400d6a:	4021      	ands	r1, r4
  400d6c:	461c      	mov	r4, r3
  400d6e:	4019      	ands	r1, r3
  400d70:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d72:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d74:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d76:	400b      	ands	r3, r1
  400d78:	4023      	ands	r3, r4
  400d7a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400d7c:	6042      	str	r2, [r0, #4]
}
  400d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d82:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d84:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d86:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400d88:	400b      	ands	r3, r1
  400d8a:	ea23 0302 	bic.w	r3, r3, r2
  400d8e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d90:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d92:	4313      	orrs	r3, r2
  400d94:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d96:	e7ca      	b.n	400d2e <pio_set_peripheral+0x28>

00400d98 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d98:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d9a:	f012 0f01 	tst.w	r2, #1
  400d9e:	d10d      	bne.n	400dbc <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400da0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400da2:	f012 0f0a 	tst.w	r2, #10
  400da6:	d00b      	beq.n	400dc0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400da8:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400daa:	f012 0f02 	tst.w	r2, #2
  400dae:	d109      	bne.n	400dc4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400db0:	f012 0f08 	tst.w	r2, #8
  400db4:	d008      	beq.n	400dc8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400db6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400dba:	e005      	b.n	400dc8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400dbc:	6641      	str	r1, [r0, #100]	; 0x64
  400dbe:	e7f0      	b.n	400da2 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400dc0:	6241      	str	r1, [r0, #36]	; 0x24
  400dc2:	e7f2      	b.n	400daa <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400dc4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400dc8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400dca:	6001      	str	r1, [r0, #0]
  400dcc:	4770      	bx	lr

00400dce <pio_set_output>:
{
  400dce:	b410      	push	{r4}
  400dd0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400dd2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400dd4:	b94c      	cbnz	r4, 400dea <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400dd6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400dd8:	b14b      	cbz	r3, 400dee <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400dda:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400ddc:	b94a      	cbnz	r2, 400df2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400dde:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400de0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400de2:	6001      	str	r1, [r0, #0]
}
  400de4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400de8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400dea:	6641      	str	r1, [r0, #100]	; 0x64
  400dec:	e7f4      	b.n	400dd8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400dee:	6541      	str	r1, [r0, #84]	; 0x54
  400df0:	e7f4      	b.n	400ddc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400df2:	6301      	str	r1, [r0, #48]	; 0x30
  400df4:	e7f4      	b.n	400de0 <pio_set_output+0x12>
	...

00400df8 <pio_configure>:
{
  400df8:	b570      	push	{r4, r5, r6, lr}
  400dfa:	b082      	sub	sp, #8
  400dfc:	4605      	mov	r5, r0
  400dfe:	4616      	mov	r6, r2
  400e00:	461c      	mov	r4, r3
	switch (ul_type) {
  400e02:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e06:	d014      	beq.n	400e32 <pio_configure+0x3a>
  400e08:	d90a      	bls.n	400e20 <pio_configure+0x28>
  400e0a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e0e:	d024      	beq.n	400e5a <pio_configure+0x62>
  400e10:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e14:	d021      	beq.n	400e5a <pio_configure+0x62>
  400e16:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e1a:	d017      	beq.n	400e4c <pio_configure+0x54>
		return 0;
  400e1c:	2000      	movs	r0, #0
  400e1e:	e01a      	b.n	400e56 <pio_configure+0x5e>
	switch (ul_type) {
  400e20:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e24:	d005      	beq.n	400e32 <pio_configure+0x3a>
  400e26:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e2a:	d002      	beq.n	400e32 <pio_configure+0x3a>
  400e2c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e30:	d1f4      	bne.n	400e1c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400e32:	4632      	mov	r2, r6
  400e34:	4628      	mov	r0, r5
  400e36:	4b11      	ldr	r3, [pc, #68]	; (400e7c <pio_configure+0x84>)
  400e38:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400e3a:	f014 0f01 	tst.w	r4, #1
  400e3e:	d102      	bne.n	400e46 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400e40:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400e42:	2001      	movs	r0, #1
  400e44:	e007      	b.n	400e56 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400e46:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400e48:	2001      	movs	r0, #1
  400e4a:	e004      	b.n	400e56 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400e4c:	461a      	mov	r2, r3
  400e4e:	4631      	mov	r1, r6
  400e50:	4b0b      	ldr	r3, [pc, #44]	; (400e80 <pio_configure+0x88>)
  400e52:	4798      	blx	r3
	return 1;
  400e54:	2001      	movs	r0, #1
}
  400e56:	b002      	add	sp, #8
  400e58:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400e5a:	f004 0301 	and.w	r3, r4, #1
  400e5e:	9300      	str	r3, [sp, #0]
  400e60:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400e64:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e68:	bf14      	ite	ne
  400e6a:	2200      	movne	r2, #0
  400e6c:	2201      	moveq	r2, #1
  400e6e:	4631      	mov	r1, r6
  400e70:	4628      	mov	r0, r5
  400e72:	4c04      	ldr	r4, [pc, #16]	; (400e84 <pio_configure+0x8c>)
  400e74:	47a0      	blx	r4
	return 1;
  400e76:	2001      	movs	r0, #1
		break;
  400e78:	e7ed      	b.n	400e56 <pio_configure+0x5e>
  400e7a:	bf00      	nop
  400e7c:	00400d07 	.word	0x00400d07
  400e80:	00400d99 	.word	0x00400d99
  400e84:	00400dcf 	.word	0x00400dcf

00400e88 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400e88:	f012 0f10 	tst.w	r2, #16
  400e8c:	d012      	beq.n	400eb4 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400e8e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400e92:	f012 0f20 	tst.w	r2, #32
  400e96:	d007      	beq.n	400ea8 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400e98:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400e9c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400ea0:	d005      	beq.n	400eae <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400ea2:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400ea6:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400ea8:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400eac:	e7f6      	b.n	400e9c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400eae:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400eb2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400eb4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400eb8:	4770      	bx	lr

00400eba <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400eba:	6401      	str	r1, [r0, #64]	; 0x40
  400ebc:	4770      	bx	lr

00400ebe <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400ebe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400ec0:	4770      	bx	lr

00400ec2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400ec2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400ec4:	4770      	bx	lr
	...

00400ec8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ecc:	4604      	mov	r4, r0
  400ece:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ed0:	4b0e      	ldr	r3, [pc, #56]	; (400f0c <pio_handler_process+0x44>)
  400ed2:	4798      	blx	r3
  400ed4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ed6:	4620      	mov	r0, r4
  400ed8:	4b0d      	ldr	r3, [pc, #52]	; (400f10 <pio_handler_process+0x48>)
  400eda:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400edc:	4005      	ands	r5, r0
  400ede:	d013      	beq.n	400f08 <pio_handler_process+0x40>
  400ee0:	4c0c      	ldr	r4, [pc, #48]	; (400f14 <pio_handler_process+0x4c>)
  400ee2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400ee6:	e003      	b.n	400ef0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ee8:	42b4      	cmp	r4, r6
  400eea:	d00d      	beq.n	400f08 <pio_handler_process+0x40>
  400eec:	3410      	adds	r4, #16
		while (status != 0) {
  400eee:	b15d      	cbz	r5, 400f08 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400ef0:	6820      	ldr	r0, [r4, #0]
  400ef2:	4540      	cmp	r0, r8
  400ef4:	d1f8      	bne.n	400ee8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ef6:	6861      	ldr	r1, [r4, #4]
  400ef8:	4229      	tst	r1, r5
  400efa:	d0f5      	beq.n	400ee8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400efc:	68e3      	ldr	r3, [r4, #12]
  400efe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f00:	6863      	ldr	r3, [r4, #4]
  400f02:	ea25 0503 	bic.w	r5, r5, r3
  400f06:	e7ef      	b.n	400ee8 <pio_handler_process+0x20>
  400f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f0c:	00400ebf 	.word	0x00400ebf
  400f10:	00400ec3 	.word	0x00400ec3
  400f14:	20400674 	.word	0x20400674

00400f18 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400f1a:	4c18      	ldr	r4, [pc, #96]	; (400f7c <pio_handler_set+0x64>)
  400f1c:	6826      	ldr	r6, [r4, #0]
  400f1e:	2e06      	cmp	r6, #6
  400f20:	d82a      	bhi.n	400f78 <pio_handler_set+0x60>
  400f22:	f04f 0c00 	mov.w	ip, #0
  400f26:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400f28:	4f15      	ldr	r7, [pc, #84]	; (400f80 <pio_handler_set+0x68>)
  400f2a:	e004      	b.n	400f36 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400f2c:	3401      	adds	r4, #1
  400f2e:	b2e4      	uxtb	r4, r4
  400f30:	46a4      	mov	ip, r4
  400f32:	42a6      	cmp	r6, r4
  400f34:	d309      	bcc.n	400f4a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400f36:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400f38:	0125      	lsls	r5, r4, #4
  400f3a:	597d      	ldr	r5, [r7, r5]
  400f3c:	428d      	cmp	r5, r1
  400f3e:	d1f5      	bne.n	400f2c <pio_handler_set+0x14>
  400f40:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400f44:	686d      	ldr	r5, [r5, #4]
  400f46:	4295      	cmp	r5, r2
  400f48:	d1f0      	bne.n	400f2c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400f4a:	4d0d      	ldr	r5, [pc, #52]	; (400f80 <pio_handler_set+0x68>)
  400f4c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400f50:	eb05 040e 	add.w	r4, r5, lr
  400f54:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400f58:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400f5a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400f5c:	9906      	ldr	r1, [sp, #24]
  400f5e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400f60:	3601      	adds	r6, #1
  400f62:	4566      	cmp	r6, ip
  400f64:	d005      	beq.n	400f72 <pio_handler_set+0x5a>
  400f66:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400f68:	461a      	mov	r2, r3
  400f6a:	4b06      	ldr	r3, [pc, #24]	; (400f84 <pio_handler_set+0x6c>)
  400f6c:	4798      	blx	r3

	return 0;
  400f6e:	2000      	movs	r0, #0
  400f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400f72:	4902      	ldr	r1, [pc, #8]	; (400f7c <pio_handler_set+0x64>)
  400f74:	600e      	str	r6, [r1, #0]
  400f76:	e7f6      	b.n	400f66 <pio_handler_set+0x4e>
		return 1;
  400f78:	2001      	movs	r0, #1
}
  400f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f7c:	204006e4 	.word	0x204006e4
  400f80:	20400674 	.word	0x20400674
  400f84:	00400e89 	.word	0x00400e89

00400f88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f8a:	210a      	movs	r1, #10
  400f8c:	4801      	ldr	r0, [pc, #4]	; (400f94 <PIOA_Handler+0xc>)
  400f8e:	4b02      	ldr	r3, [pc, #8]	; (400f98 <PIOA_Handler+0x10>)
  400f90:	4798      	blx	r3
  400f92:	bd08      	pop	{r3, pc}
  400f94:	400e0e00 	.word	0x400e0e00
  400f98:	00400ec9 	.word	0x00400ec9

00400f9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400f9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400f9e:	210b      	movs	r1, #11
  400fa0:	4801      	ldr	r0, [pc, #4]	; (400fa8 <PIOB_Handler+0xc>)
  400fa2:	4b02      	ldr	r3, [pc, #8]	; (400fac <PIOB_Handler+0x10>)
  400fa4:	4798      	blx	r3
  400fa6:	bd08      	pop	{r3, pc}
  400fa8:	400e1000 	.word	0x400e1000
  400fac:	00400ec9 	.word	0x00400ec9

00400fb0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400fb0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400fb2:	210c      	movs	r1, #12
  400fb4:	4801      	ldr	r0, [pc, #4]	; (400fbc <PIOC_Handler+0xc>)
  400fb6:	4b02      	ldr	r3, [pc, #8]	; (400fc0 <PIOC_Handler+0x10>)
  400fb8:	4798      	blx	r3
  400fba:	bd08      	pop	{r3, pc}
  400fbc:	400e1200 	.word	0x400e1200
  400fc0:	00400ec9 	.word	0x00400ec9

00400fc4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400fc4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400fc6:	2110      	movs	r1, #16
  400fc8:	4801      	ldr	r0, [pc, #4]	; (400fd0 <PIOD_Handler+0xc>)
  400fca:	4b02      	ldr	r3, [pc, #8]	; (400fd4 <PIOD_Handler+0x10>)
  400fcc:	4798      	blx	r3
  400fce:	bd08      	pop	{r3, pc}
  400fd0:	400e1400 	.word	0x400e1400
  400fd4:	00400ec9 	.word	0x00400ec9

00400fd8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400fd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400fda:	2111      	movs	r1, #17
  400fdc:	4801      	ldr	r0, [pc, #4]	; (400fe4 <PIOE_Handler+0xc>)
  400fde:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <PIOE_Handler+0x10>)
  400fe0:	4798      	blx	r3
  400fe2:	bd08      	pop	{r3, pc}
  400fe4:	400e1600 	.word	0x400e1600
  400fe8:	00400ec9 	.word	0x00400ec9

00400fec <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400fec:	2803      	cmp	r0, #3
  400fee:	d011      	beq.n	401014 <pmc_mck_set_division+0x28>
  400ff0:	2804      	cmp	r0, #4
  400ff2:	d012      	beq.n	40101a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ff4:	2802      	cmp	r0, #2
  400ff6:	bf0c      	ite	eq
  400ff8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ffc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ffe:	4a08      	ldr	r2, [pc, #32]	; (401020 <pmc_mck_set_division+0x34>)
  401000:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401006:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401008:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40100a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40100c:	f013 0f08 	tst.w	r3, #8
  401010:	d0fb      	beq.n	40100a <pmc_mck_set_division+0x1e>
}
  401012:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401014:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401018:	e7f1      	b.n	400ffe <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40101a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40101e:	e7ee      	b.n	400ffe <pmc_mck_set_division+0x12>
  401020:	400e0600 	.word	0x400e0600

00401024 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401024:	4a17      	ldr	r2, [pc, #92]	; (401084 <pmc_switch_mck_to_pllack+0x60>)
  401026:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40102c:	4318      	orrs	r0, r3
  40102e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401030:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401032:	f013 0f08 	tst.w	r3, #8
  401036:	d10a      	bne.n	40104e <pmc_switch_mck_to_pllack+0x2a>
  401038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40103c:	4911      	ldr	r1, [pc, #68]	; (401084 <pmc_switch_mck_to_pllack+0x60>)
  40103e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401040:	f012 0f08 	tst.w	r2, #8
  401044:	d103      	bne.n	40104e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401046:	3b01      	subs	r3, #1
  401048:	d1f9      	bne.n	40103e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40104a:	2001      	movs	r0, #1
  40104c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40104e:	4a0d      	ldr	r2, [pc, #52]	; (401084 <pmc_switch_mck_to_pllack+0x60>)
  401050:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401052:	f023 0303 	bic.w	r3, r3, #3
  401056:	f043 0302 	orr.w	r3, r3, #2
  40105a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40105c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40105e:	f013 0f08 	tst.w	r3, #8
  401062:	d10a      	bne.n	40107a <pmc_switch_mck_to_pllack+0x56>
  401064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401068:	4906      	ldr	r1, [pc, #24]	; (401084 <pmc_switch_mck_to_pllack+0x60>)
  40106a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40106c:	f012 0f08 	tst.w	r2, #8
  401070:	d105      	bne.n	40107e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401072:	3b01      	subs	r3, #1
  401074:	d1f9      	bne.n	40106a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401076:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401078:	4770      	bx	lr
	return 0;
  40107a:	2000      	movs	r0, #0
  40107c:	4770      	bx	lr
  40107e:	2000      	movs	r0, #0
  401080:	4770      	bx	lr
  401082:	bf00      	nop
  401084:	400e0600 	.word	0x400e0600

00401088 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401088:	b9a0      	cbnz	r0, 4010b4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40108a:	480e      	ldr	r0, [pc, #56]	; (4010c4 <pmc_switch_mainck_to_xtal+0x3c>)
  40108c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40108e:	0209      	lsls	r1, r1, #8
  401090:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401092:	4a0d      	ldr	r2, [pc, #52]	; (4010c8 <pmc_switch_mainck_to_xtal+0x40>)
  401094:	401a      	ands	r2, r3
  401096:	4b0d      	ldr	r3, [pc, #52]	; (4010cc <pmc_switch_mainck_to_xtal+0x44>)
  401098:	4313      	orrs	r3, r2
  40109a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40109c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40109e:	4602      	mov	r2, r0
  4010a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010a2:	f013 0f01 	tst.w	r3, #1
  4010a6:	d0fb      	beq.n	4010a0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4010a8:	4a06      	ldr	r2, [pc, #24]	; (4010c4 <pmc_switch_mainck_to_xtal+0x3c>)
  4010aa:	6a11      	ldr	r1, [r2, #32]
  4010ac:	4b08      	ldr	r3, [pc, #32]	; (4010d0 <pmc_switch_mainck_to_xtal+0x48>)
  4010ae:	430b      	orrs	r3, r1
  4010b0:	6213      	str	r3, [r2, #32]
  4010b2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010b4:	4903      	ldr	r1, [pc, #12]	; (4010c4 <pmc_switch_mainck_to_xtal+0x3c>)
  4010b6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4010b8:	4a06      	ldr	r2, [pc, #24]	; (4010d4 <pmc_switch_mainck_to_xtal+0x4c>)
  4010ba:	401a      	ands	r2, r3
  4010bc:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <pmc_switch_mainck_to_xtal+0x50>)
  4010be:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010c0:	620b      	str	r3, [r1, #32]
  4010c2:	4770      	bx	lr
  4010c4:	400e0600 	.word	0x400e0600
  4010c8:	ffc8fffc 	.word	0xffc8fffc
  4010cc:	00370001 	.word	0x00370001
  4010d0:	01370000 	.word	0x01370000
  4010d4:	fec8fffc 	.word	0xfec8fffc
  4010d8:	01370002 	.word	0x01370002

004010dc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4010dc:	4b02      	ldr	r3, [pc, #8]	; (4010e8 <pmc_osc_is_ready_mainck+0xc>)
  4010de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4010e0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4010e4:	4770      	bx	lr
  4010e6:	bf00      	nop
  4010e8:	400e0600 	.word	0x400e0600

004010ec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4010ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4010f0:	4b01      	ldr	r3, [pc, #4]	; (4010f8 <pmc_disable_pllack+0xc>)
  4010f2:	629a      	str	r2, [r3, #40]	; 0x28
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	400e0600 	.word	0x400e0600

004010fc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4010fc:	4b02      	ldr	r3, [pc, #8]	; (401108 <pmc_is_locked_pllack+0xc>)
  4010fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401100:	f000 0002 	and.w	r0, r0, #2
  401104:	4770      	bx	lr
  401106:	bf00      	nop
  401108:	400e0600 	.word	0x400e0600

0040110c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40110c:	283f      	cmp	r0, #63	; 0x3f
  40110e:	d81e      	bhi.n	40114e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401110:	281f      	cmp	r0, #31
  401112:	d80c      	bhi.n	40112e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401114:	4b11      	ldr	r3, [pc, #68]	; (40115c <pmc_enable_periph_clk+0x50>)
  401116:	699a      	ldr	r2, [r3, #24]
  401118:	2301      	movs	r3, #1
  40111a:	4083      	lsls	r3, r0
  40111c:	4393      	bics	r3, r2
  40111e:	d018      	beq.n	401152 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401120:	2301      	movs	r3, #1
  401122:	fa03 f000 	lsl.w	r0, r3, r0
  401126:	4b0d      	ldr	r3, [pc, #52]	; (40115c <pmc_enable_periph_clk+0x50>)
  401128:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40112a:	2000      	movs	r0, #0
  40112c:	4770      	bx	lr
		ul_id -= 32;
  40112e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401130:	4b0a      	ldr	r3, [pc, #40]	; (40115c <pmc_enable_periph_clk+0x50>)
  401132:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401136:	2301      	movs	r3, #1
  401138:	4083      	lsls	r3, r0
  40113a:	4393      	bics	r3, r2
  40113c:	d00b      	beq.n	401156 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40113e:	2301      	movs	r3, #1
  401140:	fa03 f000 	lsl.w	r0, r3, r0
  401144:	4b05      	ldr	r3, [pc, #20]	; (40115c <pmc_enable_periph_clk+0x50>)
  401146:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40114a:	2000      	movs	r0, #0
  40114c:	4770      	bx	lr
		return 1;
  40114e:	2001      	movs	r0, #1
  401150:	4770      	bx	lr
	return 0;
  401152:	2000      	movs	r0, #0
  401154:	4770      	bx	lr
  401156:	2000      	movs	r0, #0
}
  401158:	4770      	bx	lr
  40115a:	bf00      	nop
  40115c:	400e0600 	.word	0x400e0600

00401160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401160:	e7fe      	b.n	401160 <Dummy_Handler>
	...

00401164 <Reset_Handler>:
{
  401164:	b500      	push	{lr}
  401166:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401168:	4b25      	ldr	r3, [pc, #148]	; (401200 <Reset_Handler+0x9c>)
  40116a:	4a26      	ldr	r2, [pc, #152]	; (401204 <Reset_Handler+0xa0>)
  40116c:	429a      	cmp	r2, r3
  40116e:	d010      	beq.n	401192 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401170:	4b25      	ldr	r3, [pc, #148]	; (401208 <Reset_Handler+0xa4>)
  401172:	4a23      	ldr	r2, [pc, #140]	; (401200 <Reset_Handler+0x9c>)
  401174:	429a      	cmp	r2, r3
  401176:	d20c      	bcs.n	401192 <Reset_Handler+0x2e>
  401178:	3b01      	subs	r3, #1
  40117a:	1a9b      	subs	r3, r3, r2
  40117c:	f023 0303 	bic.w	r3, r3, #3
  401180:	3304      	adds	r3, #4
  401182:	4413      	add	r3, r2
  401184:	491f      	ldr	r1, [pc, #124]	; (401204 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401186:	f851 0b04 	ldr.w	r0, [r1], #4
  40118a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40118e:	429a      	cmp	r2, r3
  401190:	d1f9      	bne.n	401186 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401192:	4b1e      	ldr	r3, [pc, #120]	; (40120c <Reset_Handler+0xa8>)
  401194:	4a1e      	ldr	r2, [pc, #120]	; (401210 <Reset_Handler+0xac>)
  401196:	429a      	cmp	r2, r3
  401198:	d20a      	bcs.n	4011b0 <Reset_Handler+0x4c>
  40119a:	3b01      	subs	r3, #1
  40119c:	1a9b      	subs	r3, r3, r2
  40119e:	f023 0303 	bic.w	r3, r3, #3
  4011a2:	3304      	adds	r3, #4
  4011a4:	4413      	add	r3, r2
                *pDest++ = 0;
  4011a6:	2100      	movs	r1, #0
  4011a8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011ac:	4293      	cmp	r3, r2
  4011ae:	d1fb      	bne.n	4011a8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011b0:	4a18      	ldr	r2, [pc, #96]	; (401214 <Reset_Handler+0xb0>)
  4011b2:	4b19      	ldr	r3, [pc, #100]	; (401218 <Reset_Handler+0xb4>)
  4011b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011b8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011be:	fab3 f383 	clz	r3, r3
  4011c2:	095b      	lsrs	r3, r3, #5
  4011c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011c6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011cc:	2200      	movs	r2, #0
  4011ce:	4b13      	ldr	r3, [pc, #76]	; (40121c <Reset_Handler+0xb8>)
  4011d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4011d2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4011d4:	4a12      	ldr	r2, [pc, #72]	; (401220 <Reset_Handler+0xbc>)
  4011d6:	6813      	ldr	r3, [r2, #0]
  4011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4011dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4011de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011e2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4011e6:	b129      	cbz	r1, 4011f4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4011e8:	2201      	movs	r2, #1
  4011ea:	4b0c      	ldr	r3, [pc, #48]	; (40121c <Reset_Handler+0xb8>)
  4011ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4011ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4011f2:	b662      	cpsie	i
        __libc_init_array();
  4011f4:	4b0b      	ldr	r3, [pc, #44]	; (401224 <Reset_Handler+0xc0>)
  4011f6:	4798      	blx	r3
        main();
  4011f8:	4b0b      	ldr	r3, [pc, #44]	; (401228 <Reset_Handler+0xc4>)
  4011fa:	4798      	blx	r3
  4011fc:	e7fe      	b.n	4011fc <Reset_Handler+0x98>
  4011fe:	bf00      	nop
  401200:	20400000 	.word	0x20400000
  401204:	00402d4c 	.word	0x00402d4c
  401208:	20400454 	.word	0x20400454
  40120c:	20400730 	.word	0x20400730
  401210:	20400454 	.word	0x20400454
  401214:	e000ed00 	.word	0xe000ed00
  401218:	00400000 	.word	0x00400000
  40121c:	20400018 	.word	0x20400018
  401220:	e000ed88 	.word	0xe000ed88
  401224:	00402085 	.word	0x00402085
  401228:	00401755 	.word	0x00401755

0040122c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40122c:	4b3b      	ldr	r3, [pc, #236]	; (40131c <SystemCoreClockUpdate+0xf0>)
  40122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401230:	f003 0303 	and.w	r3, r3, #3
  401234:	2b01      	cmp	r3, #1
  401236:	d01d      	beq.n	401274 <SystemCoreClockUpdate+0x48>
  401238:	b183      	cbz	r3, 40125c <SystemCoreClockUpdate+0x30>
  40123a:	2b02      	cmp	r3, #2
  40123c:	d036      	beq.n	4012ac <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40123e:	4b37      	ldr	r3, [pc, #220]	; (40131c <SystemCoreClockUpdate+0xf0>)
  401240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401242:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401246:	2b70      	cmp	r3, #112	; 0x70
  401248:	d05f      	beq.n	40130a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40124a:	4b34      	ldr	r3, [pc, #208]	; (40131c <SystemCoreClockUpdate+0xf0>)
  40124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40124e:	4934      	ldr	r1, [pc, #208]	; (401320 <SystemCoreClockUpdate+0xf4>)
  401250:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401254:	680b      	ldr	r3, [r1, #0]
  401256:	40d3      	lsrs	r3, r2
  401258:	600b      	str	r3, [r1, #0]
  40125a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40125c:	4b31      	ldr	r3, [pc, #196]	; (401324 <SystemCoreClockUpdate+0xf8>)
  40125e:	695b      	ldr	r3, [r3, #20]
  401260:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401264:	bf14      	ite	ne
  401266:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40126a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40126e:	4b2c      	ldr	r3, [pc, #176]	; (401320 <SystemCoreClockUpdate+0xf4>)
  401270:	601a      	str	r2, [r3, #0]
  401272:	e7e4      	b.n	40123e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401274:	4b29      	ldr	r3, [pc, #164]	; (40131c <SystemCoreClockUpdate+0xf0>)
  401276:	6a1b      	ldr	r3, [r3, #32]
  401278:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40127c:	d003      	beq.n	401286 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40127e:	4a2a      	ldr	r2, [pc, #168]	; (401328 <SystemCoreClockUpdate+0xfc>)
  401280:	4b27      	ldr	r3, [pc, #156]	; (401320 <SystemCoreClockUpdate+0xf4>)
  401282:	601a      	str	r2, [r3, #0]
  401284:	e7db      	b.n	40123e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401286:	4a29      	ldr	r2, [pc, #164]	; (40132c <SystemCoreClockUpdate+0x100>)
  401288:	4b25      	ldr	r3, [pc, #148]	; (401320 <SystemCoreClockUpdate+0xf4>)
  40128a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40128c:	4b23      	ldr	r3, [pc, #140]	; (40131c <SystemCoreClockUpdate+0xf0>)
  40128e:	6a1b      	ldr	r3, [r3, #32]
  401290:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401294:	2b10      	cmp	r3, #16
  401296:	d005      	beq.n	4012a4 <SystemCoreClockUpdate+0x78>
  401298:	2b20      	cmp	r3, #32
  40129a:	d1d0      	bne.n	40123e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40129c:	4a22      	ldr	r2, [pc, #136]	; (401328 <SystemCoreClockUpdate+0xfc>)
  40129e:	4b20      	ldr	r3, [pc, #128]	; (401320 <SystemCoreClockUpdate+0xf4>)
  4012a0:	601a      	str	r2, [r3, #0]
          break;
  4012a2:	e7cc      	b.n	40123e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012a4:	4a22      	ldr	r2, [pc, #136]	; (401330 <SystemCoreClockUpdate+0x104>)
  4012a6:	4b1e      	ldr	r3, [pc, #120]	; (401320 <SystemCoreClockUpdate+0xf4>)
  4012a8:	601a      	str	r2, [r3, #0]
          break;
  4012aa:	e7c8      	b.n	40123e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012ac:	4b1b      	ldr	r3, [pc, #108]	; (40131c <SystemCoreClockUpdate+0xf0>)
  4012ae:	6a1b      	ldr	r3, [r3, #32]
  4012b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012b4:	d016      	beq.n	4012e4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012b6:	4a1c      	ldr	r2, [pc, #112]	; (401328 <SystemCoreClockUpdate+0xfc>)
  4012b8:	4b19      	ldr	r3, [pc, #100]	; (401320 <SystemCoreClockUpdate+0xf4>)
  4012ba:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012bc:	4b17      	ldr	r3, [pc, #92]	; (40131c <SystemCoreClockUpdate+0xf0>)
  4012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012c0:	f003 0303 	and.w	r3, r3, #3
  4012c4:	2b02      	cmp	r3, #2
  4012c6:	d1ba      	bne.n	40123e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012c8:	4a14      	ldr	r2, [pc, #80]	; (40131c <SystemCoreClockUpdate+0xf0>)
  4012ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4012ce:	4814      	ldr	r0, [pc, #80]	; (401320 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012d0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4012d4:	6803      	ldr	r3, [r0, #0]
  4012d6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012da:	b2d2      	uxtb	r2, r2
  4012dc:	fbb3 f3f2 	udiv	r3, r3, r2
  4012e0:	6003      	str	r3, [r0, #0]
  4012e2:	e7ac      	b.n	40123e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012e4:	4a11      	ldr	r2, [pc, #68]	; (40132c <SystemCoreClockUpdate+0x100>)
  4012e6:	4b0e      	ldr	r3, [pc, #56]	; (401320 <SystemCoreClockUpdate+0xf4>)
  4012e8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012ea:	4b0c      	ldr	r3, [pc, #48]	; (40131c <SystemCoreClockUpdate+0xf0>)
  4012ec:	6a1b      	ldr	r3, [r3, #32]
  4012ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012f2:	2b10      	cmp	r3, #16
  4012f4:	d005      	beq.n	401302 <SystemCoreClockUpdate+0xd6>
  4012f6:	2b20      	cmp	r3, #32
  4012f8:	d1e0      	bne.n	4012bc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4012fa:	4a0b      	ldr	r2, [pc, #44]	; (401328 <SystemCoreClockUpdate+0xfc>)
  4012fc:	4b08      	ldr	r3, [pc, #32]	; (401320 <SystemCoreClockUpdate+0xf4>)
  4012fe:	601a      	str	r2, [r3, #0]
          break;
  401300:	e7dc      	b.n	4012bc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401302:	4a0b      	ldr	r2, [pc, #44]	; (401330 <SystemCoreClockUpdate+0x104>)
  401304:	4b06      	ldr	r3, [pc, #24]	; (401320 <SystemCoreClockUpdate+0xf4>)
  401306:	601a      	str	r2, [r3, #0]
          break;
  401308:	e7d8      	b.n	4012bc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40130a:	4a05      	ldr	r2, [pc, #20]	; (401320 <SystemCoreClockUpdate+0xf4>)
  40130c:	6813      	ldr	r3, [r2, #0]
  40130e:	4909      	ldr	r1, [pc, #36]	; (401334 <SystemCoreClockUpdate+0x108>)
  401310:	fba1 1303 	umull	r1, r3, r1, r3
  401314:	085b      	lsrs	r3, r3, #1
  401316:	6013      	str	r3, [r2, #0]
  401318:	4770      	bx	lr
  40131a:	bf00      	nop
  40131c:	400e0600 	.word	0x400e0600
  401320:	2040001c 	.word	0x2040001c
  401324:	400e1810 	.word	0x400e1810
  401328:	00b71b00 	.word	0x00b71b00
  40132c:	003d0900 	.word	0x003d0900
  401330:	007a1200 	.word	0x007a1200
  401334:	aaaaaaab 	.word	0xaaaaaaab

00401338 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401338:	4b16      	ldr	r3, [pc, #88]	; (401394 <system_init_flash+0x5c>)
  40133a:	4298      	cmp	r0, r3
  40133c:	d913      	bls.n	401366 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40133e:	4b16      	ldr	r3, [pc, #88]	; (401398 <system_init_flash+0x60>)
  401340:	4298      	cmp	r0, r3
  401342:	d915      	bls.n	401370 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401344:	4b15      	ldr	r3, [pc, #84]	; (40139c <system_init_flash+0x64>)
  401346:	4298      	cmp	r0, r3
  401348:	d916      	bls.n	401378 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40134a:	4b15      	ldr	r3, [pc, #84]	; (4013a0 <system_init_flash+0x68>)
  40134c:	4298      	cmp	r0, r3
  40134e:	d917      	bls.n	401380 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401350:	4b14      	ldr	r3, [pc, #80]	; (4013a4 <system_init_flash+0x6c>)
  401352:	4298      	cmp	r0, r3
  401354:	d918      	bls.n	401388 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401356:	4b14      	ldr	r3, [pc, #80]	; (4013a8 <system_init_flash+0x70>)
  401358:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40135a:	bf94      	ite	ls
  40135c:	4a13      	ldrls	r2, [pc, #76]	; (4013ac <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40135e:	4a14      	ldrhi	r2, [pc, #80]	; (4013b0 <system_init_flash+0x78>)
  401360:	4b14      	ldr	r3, [pc, #80]	; (4013b4 <system_init_flash+0x7c>)
  401362:	601a      	str	r2, [r3, #0]
  401364:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401366:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40136a:	4b12      	ldr	r3, [pc, #72]	; (4013b4 <system_init_flash+0x7c>)
  40136c:	601a      	str	r2, [r3, #0]
  40136e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401370:	4a11      	ldr	r2, [pc, #68]	; (4013b8 <system_init_flash+0x80>)
  401372:	4b10      	ldr	r3, [pc, #64]	; (4013b4 <system_init_flash+0x7c>)
  401374:	601a      	str	r2, [r3, #0]
  401376:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401378:	4a10      	ldr	r2, [pc, #64]	; (4013bc <system_init_flash+0x84>)
  40137a:	4b0e      	ldr	r3, [pc, #56]	; (4013b4 <system_init_flash+0x7c>)
  40137c:	601a      	str	r2, [r3, #0]
  40137e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401380:	4a0f      	ldr	r2, [pc, #60]	; (4013c0 <system_init_flash+0x88>)
  401382:	4b0c      	ldr	r3, [pc, #48]	; (4013b4 <system_init_flash+0x7c>)
  401384:	601a      	str	r2, [r3, #0]
  401386:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401388:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40138c:	4b09      	ldr	r3, [pc, #36]	; (4013b4 <system_init_flash+0x7c>)
  40138e:	601a      	str	r2, [r3, #0]
  401390:	4770      	bx	lr
  401392:	bf00      	nop
  401394:	015ef3bf 	.word	0x015ef3bf
  401398:	02bde77f 	.word	0x02bde77f
  40139c:	041cdb3f 	.word	0x041cdb3f
  4013a0:	057bceff 	.word	0x057bceff
  4013a4:	06dac2bf 	.word	0x06dac2bf
  4013a8:	0839b67f 	.word	0x0839b67f
  4013ac:	04000500 	.word	0x04000500
  4013b0:	04000600 	.word	0x04000600
  4013b4:	400e0c00 	.word	0x400e0c00
  4013b8:	04000100 	.word	0x04000100
  4013bc:	04000200 	.word	0x04000200
  4013c0:	04000300 	.word	0x04000300

004013c4 <but_flag_callback>:
int v, d, bot;
bot = 0;


void but_flag_callback(void){
	but_flag = true;
  4013c4:	2201      	movs	r2, #1
  4013c6:	4b01      	ldr	r3, [pc, #4]	; (4013cc <but_flag_callback+0x8>)
  4013c8:	701a      	strb	r2, [r3, #0]
  4013ca:	4770      	bx	lr
  4013cc:	20400700 	.word	0x20400700

004013d0 <but_p_freq_callback>:
}
void but_p_freq_callback(void){
	but_p_freq = true;
  4013d0:	2201      	movs	r2, #1
  4013d2:	4b01      	ldr	r3, [pc, #4]	; (4013d8 <but_p_freq_callback+0x8>)
  4013d4:	701a      	strb	r2, [r3, #0]
  4013d6:	4770      	bx	lr
  4013d8:	20400708 	.word	0x20400708

004013dc <but_m_freq_callback>:
}
void but_m_freq_callback(void){
	but_m_freq = true;
  4013dc:	2201      	movs	r2, #1
  4013de:	4b01      	ldr	r3, [pc, #4]	; (4013e4 <but_m_freq_callback+0x8>)
  4013e0:	701a      	strb	r2, [r3, #0]
  4013e2:	4770      	bx	lr
  4013e4:	20400709 	.word	0x20400709

004013e8 <but_stop_callback>:
}
void but_stop_callback(void){	
	but_stop = true;
  4013e8:	2201      	movs	r2, #1
  4013ea:	4b01      	ldr	r3, [pc, #4]	; (4013f0 <but_stop_callback+0x8>)
  4013ec:	701a      	strb	r2, [r3, #0]
  4013ee:	4770      	bx	lr
  4013f0:	204006ec 	.word	0x204006ec
  4013f4:	00000000 	.word	0x00000000

004013f8 <RTC_Handler>:
}

void RTC_Handler(void)
{
  4013f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013fc:	b087      	sub	sp, #28
	uint32_t ul_status = rtc_get_status(RTC);
  4013fe:	4850      	ldr	r0, [pc, #320]	; (401540 <RTC_Handler+0x148>)
  401400:	4b50      	ldr	r3, [pc, #320]	; (401544 <RTC_Handler+0x14c>)
  401402:	4798      	blx	r3
  401404:	4604      	mov	r4, r0
	/*
	*  Verifica por qual motivo entrou
	*  na interrupcao, se foi por segundo
	*  ou Alarm
	*/
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  401406:	f010 0f04 	tst.w	r0, #4
  40140a:	d113      	bne.n	401434 <RTC_Handler+0x3c>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);

	}
	
	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  40140c:	f014 0f02 	tst.w	r4, #2
  401410:	d115      	bne.n	40143e <RTC_Handler+0x46>
			gfx_mono_draw_string("k",63,16, &sysfont);		
		}
	}
	
	
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  401412:	4d4b      	ldr	r5, [pc, #300]	; (401540 <RTC_Handler+0x148>)
  401414:	2101      	movs	r1, #1
  401416:	4628      	mov	r0, r5
  401418:	4c4b      	ldr	r4, [pc, #300]	; (401548 <RTC_Handler+0x150>)
  40141a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  40141c:	2108      	movs	r1, #8
  40141e:	4628      	mov	r0, r5
  401420:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401422:	2110      	movs	r1, #16
  401424:	4628      	mov	r0, r5
  401426:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401428:	2120      	movs	r1, #32
  40142a:	4628      	mov	r0, r5
  40142c:	47a0      	blx	r4
	
}
  40142e:	b007      	add	sp, #28
  401430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401434:	2104      	movs	r1, #4
  401436:	4842      	ldr	r0, [pc, #264]	; (401540 <RTC_Handler+0x148>)
  401438:	4b43      	ldr	r3, [pc, #268]	; (401548 <RTC_Handler+0x150>)
  40143a:	4798      	blx	r3
  40143c:	e7e6      	b.n	40140c <RTC_Handler+0x14>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  40143e:	2102      	movs	r1, #2
  401440:	483f      	ldr	r0, [pc, #252]	; (401540 <RTC_Handler+0x148>)
  401442:	4b41      	ldr	r3, [pc, #260]	; (401548 <RTC_Handler+0x150>)
  401444:	4798      	blx	r3
	if (flag_led0 == 1) {
  401446:	4b41      	ldr	r3, [pc, #260]	; (40154c <RTC_Handler+0x154>)
  401448:	781b      	ldrb	r3, [r3, #0]
  40144a:	b2db      	uxtb	r3, r3
  40144c:	2b01      	cmp	r3, #1
  40144e:	d038      	beq.n	4014c2 <RTC_Handler+0xca>
			flag_led0 = 1;
  401450:	2401      	movs	r4, #1
  401452:	4b3e      	ldr	r3, [pc, #248]	; (40154c <RTC_Handler+0x154>)
  401454:	701c      	strb	r4, [r3, #0]
			rtc_get_time(RTC, &hour, &minuto, &seg);
  401456:	4f3e      	ldr	r7, [pc, #248]	; (401550 <RTC_Handler+0x158>)
  401458:	4e3e      	ldr	r6, [pc, #248]	; (401554 <RTC_Handler+0x15c>)
  40145a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 401588 <RTC_Handler+0x190>
  40145e:	4d38      	ldr	r5, [pc, #224]	; (401540 <RTC_Handler+0x148>)
  401460:	463b      	mov	r3, r7
  401462:	4632      	mov	r2, r6
  401464:	4641      	mov	r1, r8
  401466:	4628      	mov	r0, r5
  401468:	f8df 9120 	ldr.w	r9, [pc, #288]	; 40158c <RTC_Handler+0x194>
  40146c:	47c8      	blx	r9
			rtc_set_time_alarm(RTC, 1, hour, 1, minuto, 1, seg+4);
  40146e:	f8d8 2000 	ldr.w	r2, [r8]
  401472:	683b      	ldr	r3, [r7, #0]
  401474:	3304      	adds	r3, #4
  401476:	9302      	str	r3, [sp, #8]
  401478:	9401      	str	r4, [sp, #4]
  40147a:	6833      	ldr	r3, [r6, #0]
  40147c:	9300      	str	r3, [sp, #0]
  40147e:	4623      	mov	r3, r4
  401480:	4621      	mov	r1, r4
  401482:	4628      	mov	r0, r5
  401484:	4c34      	ldr	r4, [pc, #208]	; (401558 <RTC_Handler+0x160>)
  401486:	47a0      	blx	r4
			v = 2 * 3.14 * bot/4;
  401488:	4c34      	ldr	r4, [pc, #208]	; (40155c <RTC_Handler+0x164>)
  40148a:	6820      	ldr	r0, [r4, #0]
  40148c:	4b34      	ldr	r3, [pc, #208]	; (401560 <RTC_Handler+0x168>)
  40148e:	4798      	blx	r3
  401490:	4d34      	ldr	r5, [pc, #208]	; (401564 <RTC_Handler+0x16c>)
  401492:	a329      	add	r3, pc, #164	; (adr r3, 401538 <RTC_Handler+0x140>)
  401494:	e9d3 2300 	ldrd	r2, r3, [r3]
  401498:	47a8      	blx	r5
  40149a:	2200      	movs	r2, #0
  40149c:	4b32      	ldr	r3, [pc, #200]	; (401568 <RTC_Handler+0x170>)
  40149e:	47a8      	blx	r5
  4014a0:	4b32      	ldr	r3, [pc, #200]	; (40156c <RTC_Handler+0x174>)
  4014a2:	4798      	blx	r3
  4014a4:	4b32      	ldr	r3, [pc, #200]	; (401570 <RTC_Handler+0x178>)
  4014a6:	6018      	str	r0, [r3, #0]
			bot = 0;
  4014a8:	2300      	movs	r3, #0
  4014aa:	6023      	str	r3, [r4, #0]
			itoa(v, hnum6, 10);
  4014ac:	220a      	movs	r2, #10
  4014ae:	a904      	add	r1, sp, #16
  4014b0:	4b30      	ldr	r3, [pc, #192]	; (401574 <RTC_Handler+0x17c>)
  4014b2:	4798      	blx	r3
			gfx_mono_draw_string("k",63,16, &sysfont);		
  4014b4:	4b30      	ldr	r3, [pc, #192]	; (401578 <RTC_Handler+0x180>)
  4014b6:	2210      	movs	r2, #16
  4014b8:	213f      	movs	r1, #63	; 0x3f
  4014ba:	4830      	ldr	r0, [pc, #192]	; (40157c <RTC_Handler+0x184>)
  4014bc:	4c30      	ldr	r4, [pc, #192]	; (401580 <RTC_Handler+0x188>)
  4014be:	47a0      	blx	r4
  4014c0:	e7a7      	b.n	401412 <RTC_Handler+0x1a>
				flag_led0 = 0;
  4014c2:	2500      	movs	r5, #0
  4014c4:	4b21      	ldr	r3, [pc, #132]	; (40154c <RTC_Handler+0x154>)
  4014c6:	701d      	strb	r5, [r3, #0]
				rtc_get_time(RTC, &hour, &minuto, &seg);
  4014c8:	4f21      	ldr	r7, [pc, #132]	; (401550 <RTC_Handler+0x158>)
  4014ca:	4e22      	ldr	r6, [pc, #136]	; (401554 <RTC_Handler+0x15c>)
  4014cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401588 <RTC_Handler+0x190>
  4014d0:	4c1b      	ldr	r4, [pc, #108]	; (401540 <RTC_Handler+0x148>)
  4014d2:	463b      	mov	r3, r7
  4014d4:	4632      	mov	r2, r6
  4014d6:	4641      	mov	r1, r8
  4014d8:	4620      	mov	r0, r4
  4014da:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 40158c <RTC_Handler+0x194>
  4014de:	47c8      	blx	r9
				rtc_set_time_alarm(RTC, 1, hour, 1, minuto, 1, seg+4);
  4014e0:	f8d8 2000 	ldr.w	r2, [r8]
  4014e4:	683b      	ldr	r3, [r7, #0]
  4014e6:	3304      	adds	r3, #4
  4014e8:	9302      	str	r3, [sp, #8]
  4014ea:	2101      	movs	r1, #1
  4014ec:	9101      	str	r1, [sp, #4]
  4014ee:	6833      	ldr	r3, [r6, #0]
  4014f0:	9300      	str	r3, [sp, #0]
  4014f2:	460b      	mov	r3, r1
  4014f4:	4620      	mov	r0, r4
  4014f6:	4c18      	ldr	r4, [pc, #96]	; (401558 <RTC_Handler+0x160>)
  4014f8:	47a0      	blx	r4
				v = 2 * 3.14 * bot/4;
  4014fa:	4c18      	ldr	r4, [pc, #96]	; (40155c <RTC_Handler+0x164>)
  4014fc:	6820      	ldr	r0, [r4, #0]
  4014fe:	4b18      	ldr	r3, [pc, #96]	; (401560 <RTC_Handler+0x168>)
  401500:	4798      	blx	r3
  401502:	4e18      	ldr	r6, [pc, #96]	; (401564 <RTC_Handler+0x16c>)
  401504:	a30c      	add	r3, pc, #48	; (adr r3, 401538 <RTC_Handler+0x140>)
  401506:	e9d3 2300 	ldrd	r2, r3, [r3]
  40150a:	47b0      	blx	r6
  40150c:	2200      	movs	r2, #0
  40150e:	4b16      	ldr	r3, [pc, #88]	; (401568 <RTC_Handler+0x170>)
  401510:	47b0      	blx	r6
  401512:	4b16      	ldr	r3, [pc, #88]	; (40156c <RTC_Handler+0x174>)
  401514:	4798      	blx	r3
  401516:	4b16      	ldr	r3, [pc, #88]	; (401570 <RTC_Handler+0x178>)
  401518:	6018      	str	r0, [r3, #0]
				bot = 0;
  40151a:	6025      	str	r5, [r4, #0]
				itoa(v, hnum5, 10);
  40151c:	220a      	movs	r2, #10
  40151e:	a904      	add	r1, sp, #16
  401520:	4b14      	ldr	r3, [pc, #80]	; (401574 <RTC_Handler+0x17c>)
  401522:	4798      	blx	r3
				gfx_mono_draw_string("j",63,16, &sysfont);
  401524:	4b14      	ldr	r3, [pc, #80]	; (401578 <RTC_Handler+0x180>)
  401526:	2210      	movs	r2, #16
  401528:	213f      	movs	r1, #63	; 0x3f
  40152a:	4816      	ldr	r0, [pc, #88]	; (401584 <RTC_Handler+0x18c>)
  40152c:	4c14      	ldr	r4, [pc, #80]	; (401580 <RTC_Handler+0x188>)
  40152e:	47a0      	blx	r4
  401530:	e76f      	b.n	401412 <RTC_Handler+0x1a>
  401532:	bf00      	nop
  401534:	f3af 8000 	nop.w
  401538:	51eb851f 	.word	0x51eb851f
  40153c:	40191eb8 	.word	0x40191eb8
  401540:	400e1860 	.word	0x400e1860
  401544:	0040045d 	.word	0x0040045d
  401548:	00400461 	.word	0x00400461
  40154c:	20400020 	.word	0x20400020
  401550:	204006f4 	.word	0x204006f4
  401554:	204006f0 	.word	0x204006f0
  401558:	004002b1 	.word	0x004002b1
  40155c:	204006e8 	.word	0x204006e8
  401560:	00401b45 	.word	0x00401b45
  401564:	00401c11 	.word	0x00401c11
  401568:	3fd00000 	.word	0x3fd00000
  40156c:	00402035 	.word	0x00402035
  401570:	204006fc 	.word	0x204006fc
  401574:	00402105 	.word	0x00402105
  401578:	2040000c 	.word	0x2040000c
  40157c:	00402cf4 	.word	0x00402cf4
  401580:	00400791 	.word	0x00400791
  401584:	00402cf0 	.word	0x00402cf0
  401588:	204006f8 	.word	0x204006f8
  40158c:	004001c7 	.word	0x004001c7

00401590 <io_init>:


// Inicializa botao SW0 do kit com interrupcao
void io_init(void)
{
  401590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401594:	b082      	sub	sp, #8
	board_init();
  401596:	4b46      	ldr	r3, [pc, #280]	; (4016b0 <io_init+0x120>)
  401598:	4798      	blx	r3
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  40159a:	4b46      	ldr	r3, [pc, #280]	; (4016b4 <io_init+0x124>)
  40159c:	4798      	blx	r3

	// Configura led da placa
	pmc_enable_periph_clk(LED_PIO_ID);
  40159e:	200c      	movs	r0, #12
  4015a0:	4e45      	ldr	r6, [pc, #276]	; (4016b8 <io_init+0x128>)
  4015a2:	47b0      	blx	r6
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  4015a4:	4d45      	ldr	r5, [pc, #276]	; (4016bc <io_init+0x12c>)
  4015a6:	2300      	movs	r3, #0
  4015a8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015ac:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4015b0:	4628      	mov	r0, r5
  4015b2:	f8df a130 	ldr.w	sl, [pc, #304]	; 4016e4 <io_init+0x154>
  4015b6:	47d0      	blx	sl
	// configura botoes do oled
	pmc_enable_periph_clk(EBUT1_PIO_ID);
  4015b8:	2010      	movs	r0, #16
  4015ba:	47b0      	blx	r6
	pmc_enable_periph_clk(EBUT2_PIO_ID);
  4015bc:	200a      	movs	r0, #10
  4015be:	47b0      	blx	r6
	pmc_enable_periph_clk(EBUT3_PIO_ID);
  4015c0:	200c      	movs	r0, #12
  4015c2:	47b0      	blx	r6
	// configura botoes do oled como input
	pio_set_input(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_DEFAULT);
  4015c4:	4f3e      	ldr	r7, [pc, #248]	; (4016c0 <io_init+0x130>)
  4015c6:	2200      	movs	r2, #0
  4015c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015cc:	4638      	mov	r0, r7
  4015ce:	f8df 9118 	ldr.w	r9, [pc, #280]	; 4016e8 <io_init+0x158>
  4015d2:	47c8      	blx	r9
	pio_pull_up(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_PULLUP);
  4015d4:	2201      	movs	r2, #1
  4015d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015da:	4638      	mov	r0, r7
  4015dc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 4016ec <io_init+0x15c>
  4015e0:	47c0      	blx	r8
	pio_set_input(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_DEFAULT);
  4015e2:	4c38      	ldr	r4, [pc, #224]	; (4016c4 <io_init+0x134>)
  4015e4:	2200      	movs	r2, #0
  4015e6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4015ea:	4620      	mov	r0, r4
  4015ec:	47c8      	blx	r9
	pio_pull_up(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_PULLUP);
  4015ee:	2201      	movs	r2, #1
  4015f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4015f4:	4620      	mov	r0, r4
  4015f6:	47c0      	blx	r8
	pio_set_input(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_DEFAULT);
  4015f8:	2200      	movs	r2, #0
  4015fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4015fe:	4628      	mov	r0, r5
  401600:	47c8      	blx	r9
	pio_pull_up(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_PULLUP);
  401602:	2201      	movs	r2, #1
  401604:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401608:	4628      	mov	r0, r5
  40160a:	47c0      	blx	r8
	// Inicializa clock do perif?rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  40160c:	200a      	movs	r0, #10
  40160e:	47b0      	blx	r6
	// Configura PIO para lidar com o pino do bot?o como entrada
	// com pull-up
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP);
  401610:	2301      	movs	r3, #1
  401612:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401616:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40161a:	4620      	mov	r0, r4
  40161c:	47d0      	blx	sl
	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(BUT_PIO,
  40161e:	4b2a      	ldr	r3, [pc, #168]	; (4016c8 <io_init+0x138>)
  401620:	9300      	str	r3, [sp, #0]
  401622:	2370      	movs	r3, #112	; 0x70
  401624:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401628:	210a      	movs	r1, #10
  40162a:	4620      	mov	r0, r4
  40162c:	4e27      	ldr	r6, [pc, #156]	; (4016cc <io_init+0x13c>)
  40162e:	47b0      	blx	r6
	BUT_PIO_ID,
	BUT_IDX_MASK,
	PIO_IT_RISE_EDGE,
	but_flag_callback);
	pio_handler_set(EBUT1_PIO,
  401630:	4b27      	ldr	r3, [pc, #156]	; (4016d0 <io_init+0x140>)
  401632:	9300      	str	r3, [sp, #0]
  401634:	2350      	movs	r3, #80	; 0x50
  401636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40163a:	2110      	movs	r1, #16
  40163c:	4638      	mov	r0, r7
  40163e:	47b0      	blx	r6
	EBUT1_PIO_ID,
	EBUT1_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_p_freq_callback);
	pio_handler_set(EBUT2_PIO,
  401640:	4b24      	ldr	r3, [pc, #144]	; (4016d4 <io_init+0x144>)
  401642:	9300      	str	r3, [sp, #0]
  401644:	2350      	movs	r3, #80	; 0x50
  401646:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40164a:	210a      	movs	r1, #10
  40164c:	4620      	mov	r0, r4
  40164e:	47b0      	blx	r6
	EBUT2_PIO_ID,
	EBUT2_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_m_freq_callback);
	pio_handler_set(EBUT3_PIO,
  401650:	4b21      	ldr	r3, [pc, #132]	; (4016d8 <io_init+0x148>)
  401652:	9300      	str	r3, [sp, #0]
  401654:	2350      	movs	r3, #80	; 0x50
  401656:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40165a:	210c      	movs	r1, #12
  40165c:	4628      	mov	r0, r5
  40165e:	47b0      	blx	r6
	EBUT3_PIO_ID,
	EBUT3_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_stop_callback);
	// Ativa interrup??o
	pio_enable_interrupt(EBUT1_PIO, EBUT1_PIO_IDX_MASK);
  401660:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401664:	4638      	mov	r0, r7
  401666:	4e1d      	ldr	r6, [pc, #116]	; (4016dc <io_init+0x14c>)
  401668:	47b0      	blx	r6
	pio_enable_interrupt(EBUT2_PIO, EBUT2_PIO_IDX_MASK);
  40166a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40166e:	4620      	mov	r0, r4
  401670:	47b0      	blx	r6
	pio_enable_interrupt(EBUT3_PIO, EBUT3_PIO_IDX_MASK);
  401672:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401676:	4628      	mov	r0, r5
  401678:	47b0      	blx	r6

	// Ativa interrup??o
	pio_enable_interrupt(BUT_PIO, BUT_IDX_MASK);
  40167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40167e:	4620      	mov	r0, r4
  401680:	47b0      	blx	r6
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401682:	4b17      	ldr	r3, [pc, #92]	; (4016e0 <io_init+0x150>)
  401684:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401688:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40168a:	2280      	movs	r2, #128	; 0x80
  40168c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401690:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  401694:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401696:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40169a:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40169c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4016a4:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4016a6:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	NVIC_SetPriority(EBUT1_PIO_ID, 4); // Prioridade 4
	NVIC_EnableIRQ(EBUT2_PIO_ID);
	NVIC_SetPriority(EBUT2_PIO_ID, 4); // Prioridade 4
	NVIC_EnableIRQ(EBUT3_PIO_ID);
	NVIC_SetPriority(EBUT3_PIO_ID, 4); // Prioridade 4
}
  4016aa:	b002      	add	sp, #8
  4016ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4016b0:	00400bb9 	.word	0x00400bb9
  4016b4:	00400b49 	.word	0x00400b49
  4016b8:	0040110d 	.word	0x0040110d
  4016bc:	400e1200 	.word	0x400e1200
  4016c0:	400e1400 	.word	0x400e1400
  4016c4:	400e0e00 	.word	0x400e0e00
  4016c8:	004013c5 	.word	0x004013c5
  4016cc:	00400f19 	.word	0x00400f19
  4016d0:	004013d1 	.word	0x004013d1
  4016d4:	004013dd 	.word	0x004013dd
  4016d8:	004013e9 	.word	0x004013e9
  4016dc:	00400ebb 	.word	0x00400ebb
  4016e0:	e000e100 	.word	0xe000e100
  4016e4:	00400df9 	.word	0x00400df9
  4016e8:	00400d99 	.word	0x00400d99
  4016ec:	00400cf9 	.word	0x00400cf9

004016f0 <RTC_init>:
	itoa(hz, hnum2, 10);
	gfx_mono_draw_string(hnum2, 60,16, &sysfont);
}


void RTC_init(){
  4016f0:	b530      	push	{r4, r5, lr}
  4016f2:	b083      	sub	sp, #12
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  4016f4:	2002      	movs	r0, #2
  4016f6:	4b11      	ldr	r3, [pc, #68]	; (40173c <RTC_init+0x4c>)
  4016f8:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  4016fa:	4c11      	ldr	r4, [pc, #68]	; (401740 <RTC_init+0x50>)
  4016fc:	2100      	movs	r1, #0
  4016fe:	4620      	mov	r0, r4
  401700:	4b10      	ldr	r3, [pc, #64]	; (401744 <RTC_init+0x54>)
  401702:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MOUNTH, DAY, WEEK);
  401704:	230c      	movs	r3, #12
  401706:	9300      	str	r3, [sp, #0]
  401708:	2313      	movs	r3, #19
  40170a:	2203      	movs	r2, #3
  40170c:	f240 71e2 	movw	r1, #2018	; 0x7e2
  401710:	4620      	mov	r0, r4
  401712:	4d0d      	ldr	r5, [pc, #52]	; (401748 <RTC_init+0x58>)
  401714:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  401716:	2300      	movs	r3, #0
  401718:	461a      	mov	r2, r3
  40171a:	4619      	mov	r1, r3
  40171c:	4620      	mov	r0, r4
  40171e:	4c0b      	ldr	r4, [pc, #44]	; (40174c <RTC_init+0x5c>)
  401720:	47a0      	blx	r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401722:	4b0b      	ldr	r3, [pc, #44]	; (401750 <RTC_init+0x60>)
  401724:	2204      	movs	r2, #4
  401726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40172a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40172e:	2100      	movs	r1, #0
  401730:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401734:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);



}
  401736:	b003      	add	sp, #12
  401738:	bd30      	pop	{r4, r5, pc}
  40173a:	bf00      	nop
  40173c:	0040110d 	.word	0x0040110d
  401740:	400e1860 	.word	0x400e1860
  401744:	004001ad 	.word	0x004001ad
  401748:	00400345 	.word	0x00400345
  40174c:	00400221 	.word	0x00400221
  401750:	e000e100 	.word	0xe000e100

00401754 <main>:



int main (void)
{
  401754:	b580      	push	{r7, lr}
  401756:	b084      	sub	sp, #16
	io_init();
  401758:	4b3a      	ldr	r3, [pc, #232]	; (401844 <main+0xf0>)
  40175a:	4798      	blx	r3
	delay_init();
	
	// Inicializa clock
	sysclk_init();
  40175c:	4b3a      	ldr	r3, [pc, #232]	; (401848 <main+0xf4>)
  40175e:	4798      	blx	r3
	// Desativa watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
  401760:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401764:	4b39      	ldr	r3, [pc, #228]	; (40184c <main+0xf8>)
  401766:	605a      	str	r2, [r3, #4]

	// configura botao com interrupcao
	pio_set(LED_PIO, LED_IDX_MASK);
  401768:	f44f 7180 	mov.w	r1, #256	; 0x100
  40176c:	4838      	ldr	r0, [pc, #224]	; (401850 <main+0xfc>)
  40176e:	4b39      	ldr	r3, [pc, #228]	; (401854 <main+0x100>)
  401770:	4798      	blx	r3
	
	RTC_init();
  401772:	4b39      	ldr	r3, [pc, #228]	; (401858 <main+0x104>)
  401774:	4798      	blx	r3
	
	rtc_get_time(RTC, &hour, &minuto, &seg);
  401776:	4e39      	ldr	r6, [pc, #228]	; (40185c <main+0x108>)
  401778:	4d39      	ldr	r5, [pc, #228]	; (401860 <main+0x10c>)
  40177a:	4f3a      	ldr	r7, [pc, #232]	; (401864 <main+0x110>)
  40177c:	4c3a      	ldr	r4, [pc, #232]	; (401868 <main+0x114>)
  40177e:	4633      	mov	r3, r6
  401780:	462a      	mov	r2, r5
  401782:	4639      	mov	r1, r7
  401784:	4620      	mov	r0, r4
  401786:	f8df 8104 	ldr.w	r8, [pc, #260]	; 40188c <main+0x138>
  40178a:	47c0      	blx	r8
	rtc_set_date_alarm(RTC, 1, MOUNTH, 1, DAY);
  40178c:	2313      	movs	r3, #19
  40178e:	9300      	str	r3, [sp, #0]
  401790:	2301      	movs	r3, #1
  401792:	2203      	movs	r2, #3
  401794:	4619      	mov	r1, r3
  401796:	4620      	mov	r0, r4
  401798:	f8df 8100 	ldr.w	r8, [pc, #256]	; 40189c <main+0x148>
  40179c:	47c0      	blx	r8
	rtc_set_time_alarm(RTC, 1, hour, 1, minuto, 1, seg+4);
  40179e:	683a      	ldr	r2, [r7, #0]
  4017a0:	6833      	ldr	r3, [r6, #0]
  4017a2:	3304      	adds	r3, #4
  4017a4:	9302      	str	r3, [sp, #8]
  4017a6:	2101      	movs	r1, #1
  4017a8:	9101      	str	r1, [sp, #4]
  4017aa:	682b      	ldr	r3, [r5, #0]
  4017ac:	9300      	str	r3, [sp, #0]
  4017ae:	460b      	mov	r3, r1
  4017b0:	4620      	mov	r0, r4
  4017b2:	4d2e      	ldr	r5, [pc, #184]	; (40186c <main+0x118>)
  4017b4:	47a8      	blx	r5
	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  4017b6:	2102      	movs	r1, #2
  4017b8:	4620      	mov	r0, r4
  4017ba:	4b2d      	ldr	r3, [pc, #180]	; (401870 <main+0x11c>)
  4017bc:	4798      	blx	r3
	
	gfx_mono_ssd1306_init();
  4017be:	4b2d      	ldr	r3, [pc, #180]	; (401874 <main+0x120>)
  4017c0:	4798      	blx	r3
	
	gfx_mono_draw_string(":",50,16, &sysfont);
  4017c2:	4e2d      	ldr	r6, [pc, #180]	; (401878 <main+0x124>)
  4017c4:	4d2d      	ldr	r5, [pc, #180]	; (40187c <main+0x128>)
  4017c6:	4633      	mov	r3, r6
  4017c8:	2210      	movs	r2, #16
  4017ca:	2132      	movs	r1, #50	; 0x32
  4017cc:	4628      	mov	r0, r5
  4017ce:	4c2c      	ldr	r4, [pc, #176]	; (401880 <main+0x12c>)
  4017d0:	47a0      	blx	r4
	gfx_mono_draw_string(":",20,16, &sysfont);
  4017d2:	4633      	mov	r3, r6
  4017d4:	2210      	movs	r2, #16
  4017d6:	2114      	movs	r1, #20
  4017d8:	4628      	mov	r0, r5
  4017da:	47a0      	blx	r4
	
	/* Insert application code here, after the board has been initialized. */
	
	while(1) {
		rtc_get_time(RTC, &hour, &minuto, &seg);
  4017dc:	4f1f      	ldr	r7, [pc, #124]	; (40185c <main+0x108>)
  4017de:	4e20      	ldr	r6, [pc, #128]	; (401860 <main+0x10c>)
  4017e0:	4d21      	ldr	r5, [pc, #132]	; (401868 <main+0x114>)
  4017e2:	e00a      	b.n	4017fa <main+0xa6>
		//delay_ms(100);
		//display_freq(seg, minuto,hour);
		
		
		if(but_stop){
			rtc_set_time(RTC, hour, minuto+1, seg);		
  4017e4:	6832      	ldr	r2, [r6, #0]
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	3201      	adds	r2, #1
  4017ea:	491e      	ldr	r1, [pc, #120]	; (401864 <main+0x110>)
  4017ec:	6809      	ldr	r1, [r1, #0]
  4017ee:	4628      	mov	r0, r5
  4017f0:	4c24      	ldr	r4, [pc, #144]	; (401884 <main+0x130>)
  4017f2:	47a0      	blx	r4
			but_stop = false;
  4017f4:	2200      	movs	r2, #0
  4017f6:	4b24      	ldr	r3, [pc, #144]	; (401888 <main+0x134>)
  4017f8:	701a      	strb	r2, [r3, #0]
		rtc_get_time(RTC, &hour, &minuto, &seg);
  4017fa:	463b      	mov	r3, r7
  4017fc:	4632      	mov	r2, r6
  4017fe:	4919      	ldr	r1, [pc, #100]	; (401864 <main+0x110>)
  401800:	4628      	mov	r0, r5
  401802:	4c22      	ldr	r4, [pc, #136]	; (40188c <main+0x138>)
  401804:	47a0      	blx	r4
		if(but_stop){
  401806:	4b20      	ldr	r3, [pc, #128]	; (401888 <main+0x134>)
  401808:	781b      	ldrb	r3, [r3, #0]
  40180a:	2b00      	cmp	r3, #0
  40180c:	d1ea      	bne.n	4017e4 <main+0x90>
		}
		else if(but_p_freq){	
  40180e:	4b20      	ldr	r3, [pc, #128]	; (401890 <main+0x13c>)
  401810:	781b      	ldrb	r3, [r3, #0]
  401812:	b13b      	cbz	r3, 401824 <main+0xd0>
			bot += 1;
  401814:	4a1f      	ldr	r2, [pc, #124]	; (401894 <main+0x140>)
  401816:	6813      	ldr	r3, [r2, #0]
  401818:	3301      	adds	r3, #1
  40181a:	6013      	str	r3, [r2, #0]
			but_p_freq=false;
  40181c:	2200      	movs	r2, #0
  40181e:	4b1c      	ldr	r3, [pc, #112]	; (401890 <main+0x13c>)
  401820:	701a      	strb	r2, [r3, #0]
  401822:	e7ea      	b.n	4017fa <main+0xa6>
		}
		else if(but_m_freq){
  401824:	4b1c      	ldr	r3, [pc, #112]	; (401898 <main+0x144>)
  401826:	781b      	ldrb	r3, [r3, #0]
  401828:	2b00      	cmp	r3, #0
  40182a:	d0e6      	beq.n	4017fa <main+0xa6>
			rtc_set_time(RTC, hour+1, minuto, seg);
  40182c:	4b0d      	ldr	r3, [pc, #52]	; (401864 <main+0x110>)
  40182e:	6819      	ldr	r1, [r3, #0]
  401830:	683b      	ldr	r3, [r7, #0]
  401832:	6832      	ldr	r2, [r6, #0]
  401834:	3101      	adds	r1, #1
  401836:	4628      	mov	r0, r5
  401838:	4c12      	ldr	r4, [pc, #72]	; (401884 <main+0x130>)
  40183a:	47a0      	blx	r4
			but_m_freq=false;
  40183c:	2200      	movs	r2, #0
  40183e:	4b16      	ldr	r3, [pc, #88]	; (401898 <main+0x144>)
  401840:	701a      	strb	r2, [r3, #0]
  401842:	e7da      	b.n	4017fa <main+0xa6>
  401844:	00401591 	.word	0x00401591
  401848:	00400b49 	.word	0x00400b49
  40184c:	400e1850 	.word	0x400e1850
  401850:	400e1200 	.word	0x400e1200
  401854:	00400d03 	.word	0x00400d03
  401858:	004016f1 	.word	0x004016f1
  40185c:	204006f4 	.word	0x204006f4
  401860:	204006f0 	.word	0x204006f0
  401864:	204006f8 	.word	0x204006f8
  401868:	400e1860 	.word	0x400e1860
  40186c:	004002b1 	.word	0x004002b1
  401870:	004001c3 	.word	0x004001c3
  401874:	00400829 	.word	0x00400829
  401878:	2040000c 	.word	0x2040000c
  40187c:	00402cf8 	.word	0x00402cf8
  401880:	00400791 	.word	0x00400791
  401884:	00400221 	.word	0x00400221
  401888:	204006ec 	.word	0x204006ec
  40188c:	004001c7 	.word	0x004001c7
  401890:	20400708 	.word	0x20400708
  401894:	204006e8 	.word	0x204006e8
  401898:	20400709 	.word	0x20400709
  40189c:	004003fd 	.word	0x004003fd

004018a0 <__aeabi_drsub>:
  4018a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4018a4:	e002      	b.n	4018ac <__adddf3>
  4018a6:	bf00      	nop

004018a8 <__aeabi_dsub>:
  4018a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004018ac <__adddf3>:
  4018ac:	b530      	push	{r4, r5, lr}
  4018ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4018b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4018b6:	ea94 0f05 	teq	r4, r5
  4018ba:	bf08      	it	eq
  4018bc:	ea90 0f02 	teqeq	r0, r2
  4018c0:	bf1f      	itttt	ne
  4018c2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4018c6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4018ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4018ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4018d2:	f000 80e2 	beq.w	401a9a <__adddf3+0x1ee>
  4018d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4018da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4018de:	bfb8      	it	lt
  4018e0:	426d      	neglt	r5, r5
  4018e2:	dd0c      	ble.n	4018fe <__adddf3+0x52>
  4018e4:	442c      	add	r4, r5
  4018e6:	ea80 0202 	eor.w	r2, r0, r2
  4018ea:	ea81 0303 	eor.w	r3, r1, r3
  4018ee:	ea82 0000 	eor.w	r0, r2, r0
  4018f2:	ea83 0101 	eor.w	r1, r3, r1
  4018f6:	ea80 0202 	eor.w	r2, r0, r2
  4018fa:	ea81 0303 	eor.w	r3, r1, r3
  4018fe:	2d36      	cmp	r5, #54	; 0x36
  401900:	bf88      	it	hi
  401902:	bd30      	pophi	{r4, r5, pc}
  401904:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401908:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40190c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401910:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401914:	d002      	beq.n	40191c <__adddf3+0x70>
  401916:	4240      	negs	r0, r0
  401918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40191c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401920:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401924:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401928:	d002      	beq.n	401930 <__adddf3+0x84>
  40192a:	4252      	negs	r2, r2
  40192c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401930:	ea94 0f05 	teq	r4, r5
  401934:	f000 80a7 	beq.w	401a86 <__adddf3+0x1da>
  401938:	f1a4 0401 	sub.w	r4, r4, #1
  40193c:	f1d5 0e20 	rsbs	lr, r5, #32
  401940:	db0d      	blt.n	40195e <__adddf3+0xb2>
  401942:	fa02 fc0e 	lsl.w	ip, r2, lr
  401946:	fa22 f205 	lsr.w	r2, r2, r5
  40194a:	1880      	adds	r0, r0, r2
  40194c:	f141 0100 	adc.w	r1, r1, #0
  401950:	fa03 f20e 	lsl.w	r2, r3, lr
  401954:	1880      	adds	r0, r0, r2
  401956:	fa43 f305 	asr.w	r3, r3, r5
  40195a:	4159      	adcs	r1, r3
  40195c:	e00e      	b.n	40197c <__adddf3+0xd0>
  40195e:	f1a5 0520 	sub.w	r5, r5, #32
  401962:	f10e 0e20 	add.w	lr, lr, #32
  401966:	2a01      	cmp	r2, #1
  401968:	fa03 fc0e 	lsl.w	ip, r3, lr
  40196c:	bf28      	it	cs
  40196e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401972:	fa43 f305 	asr.w	r3, r3, r5
  401976:	18c0      	adds	r0, r0, r3
  401978:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40197c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401980:	d507      	bpl.n	401992 <__adddf3+0xe6>
  401982:	f04f 0e00 	mov.w	lr, #0
  401986:	f1dc 0c00 	rsbs	ip, ip, #0
  40198a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40198e:	eb6e 0101 	sbc.w	r1, lr, r1
  401992:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401996:	d31b      	bcc.n	4019d0 <__adddf3+0x124>
  401998:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40199c:	d30c      	bcc.n	4019b8 <__adddf3+0x10c>
  40199e:	0849      	lsrs	r1, r1, #1
  4019a0:	ea5f 0030 	movs.w	r0, r0, rrx
  4019a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4019a8:	f104 0401 	add.w	r4, r4, #1
  4019ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4019b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4019b4:	f080 809a 	bcs.w	401aec <__adddf3+0x240>
  4019b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4019bc:	bf08      	it	eq
  4019be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4019c2:	f150 0000 	adcs.w	r0, r0, #0
  4019c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4019ca:	ea41 0105 	orr.w	r1, r1, r5
  4019ce:	bd30      	pop	{r4, r5, pc}
  4019d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4019d4:	4140      	adcs	r0, r0
  4019d6:	eb41 0101 	adc.w	r1, r1, r1
  4019da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4019de:	f1a4 0401 	sub.w	r4, r4, #1
  4019e2:	d1e9      	bne.n	4019b8 <__adddf3+0x10c>
  4019e4:	f091 0f00 	teq	r1, #0
  4019e8:	bf04      	itt	eq
  4019ea:	4601      	moveq	r1, r0
  4019ec:	2000      	moveq	r0, #0
  4019ee:	fab1 f381 	clz	r3, r1
  4019f2:	bf08      	it	eq
  4019f4:	3320      	addeq	r3, #32
  4019f6:	f1a3 030b 	sub.w	r3, r3, #11
  4019fa:	f1b3 0220 	subs.w	r2, r3, #32
  4019fe:	da0c      	bge.n	401a1a <__adddf3+0x16e>
  401a00:	320c      	adds	r2, #12
  401a02:	dd08      	ble.n	401a16 <__adddf3+0x16a>
  401a04:	f102 0c14 	add.w	ip, r2, #20
  401a08:	f1c2 020c 	rsb	r2, r2, #12
  401a0c:	fa01 f00c 	lsl.w	r0, r1, ip
  401a10:	fa21 f102 	lsr.w	r1, r1, r2
  401a14:	e00c      	b.n	401a30 <__adddf3+0x184>
  401a16:	f102 0214 	add.w	r2, r2, #20
  401a1a:	bfd8      	it	le
  401a1c:	f1c2 0c20 	rsble	ip, r2, #32
  401a20:	fa01 f102 	lsl.w	r1, r1, r2
  401a24:	fa20 fc0c 	lsr.w	ip, r0, ip
  401a28:	bfdc      	itt	le
  401a2a:	ea41 010c 	orrle.w	r1, r1, ip
  401a2e:	4090      	lslle	r0, r2
  401a30:	1ae4      	subs	r4, r4, r3
  401a32:	bfa2      	ittt	ge
  401a34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401a38:	4329      	orrge	r1, r5
  401a3a:	bd30      	popge	{r4, r5, pc}
  401a3c:	ea6f 0404 	mvn.w	r4, r4
  401a40:	3c1f      	subs	r4, #31
  401a42:	da1c      	bge.n	401a7e <__adddf3+0x1d2>
  401a44:	340c      	adds	r4, #12
  401a46:	dc0e      	bgt.n	401a66 <__adddf3+0x1ba>
  401a48:	f104 0414 	add.w	r4, r4, #20
  401a4c:	f1c4 0220 	rsb	r2, r4, #32
  401a50:	fa20 f004 	lsr.w	r0, r0, r4
  401a54:	fa01 f302 	lsl.w	r3, r1, r2
  401a58:	ea40 0003 	orr.w	r0, r0, r3
  401a5c:	fa21 f304 	lsr.w	r3, r1, r4
  401a60:	ea45 0103 	orr.w	r1, r5, r3
  401a64:	bd30      	pop	{r4, r5, pc}
  401a66:	f1c4 040c 	rsb	r4, r4, #12
  401a6a:	f1c4 0220 	rsb	r2, r4, #32
  401a6e:	fa20 f002 	lsr.w	r0, r0, r2
  401a72:	fa01 f304 	lsl.w	r3, r1, r4
  401a76:	ea40 0003 	orr.w	r0, r0, r3
  401a7a:	4629      	mov	r1, r5
  401a7c:	bd30      	pop	{r4, r5, pc}
  401a7e:	fa21 f004 	lsr.w	r0, r1, r4
  401a82:	4629      	mov	r1, r5
  401a84:	bd30      	pop	{r4, r5, pc}
  401a86:	f094 0f00 	teq	r4, #0
  401a8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401a8e:	bf06      	itte	eq
  401a90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401a94:	3401      	addeq	r4, #1
  401a96:	3d01      	subne	r5, #1
  401a98:	e74e      	b.n	401938 <__adddf3+0x8c>
  401a9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a9e:	bf18      	it	ne
  401aa0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401aa4:	d029      	beq.n	401afa <__adddf3+0x24e>
  401aa6:	ea94 0f05 	teq	r4, r5
  401aaa:	bf08      	it	eq
  401aac:	ea90 0f02 	teqeq	r0, r2
  401ab0:	d005      	beq.n	401abe <__adddf3+0x212>
  401ab2:	ea54 0c00 	orrs.w	ip, r4, r0
  401ab6:	bf04      	itt	eq
  401ab8:	4619      	moveq	r1, r3
  401aba:	4610      	moveq	r0, r2
  401abc:	bd30      	pop	{r4, r5, pc}
  401abe:	ea91 0f03 	teq	r1, r3
  401ac2:	bf1e      	ittt	ne
  401ac4:	2100      	movne	r1, #0
  401ac6:	2000      	movne	r0, #0
  401ac8:	bd30      	popne	{r4, r5, pc}
  401aca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401ace:	d105      	bne.n	401adc <__adddf3+0x230>
  401ad0:	0040      	lsls	r0, r0, #1
  401ad2:	4149      	adcs	r1, r1
  401ad4:	bf28      	it	cs
  401ad6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401ada:	bd30      	pop	{r4, r5, pc}
  401adc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401ae0:	bf3c      	itt	cc
  401ae2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401ae6:	bd30      	popcc	{r4, r5, pc}
  401ae8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401aec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401af0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401af4:	f04f 0000 	mov.w	r0, #0
  401af8:	bd30      	pop	{r4, r5, pc}
  401afa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401afe:	bf1a      	itte	ne
  401b00:	4619      	movne	r1, r3
  401b02:	4610      	movne	r0, r2
  401b04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401b08:	bf1c      	itt	ne
  401b0a:	460b      	movne	r3, r1
  401b0c:	4602      	movne	r2, r0
  401b0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401b12:	bf06      	itte	eq
  401b14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401b18:	ea91 0f03 	teqeq	r1, r3
  401b1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401b20:	bd30      	pop	{r4, r5, pc}
  401b22:	bf00      	nop

00401b24 <__aeabi_ui2d>:
  401b24:	f090 0f00 	teq	r0, #0
  401b28:	bf04      	itt	eq
  401b2a:	2100      	moveq	r1, #0
  401b2c:	4770      	bxeq	lr
  401b2e:	b530      	push	{r4, r5, lr}
  401b30:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401b34:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401b38:	f04f 0500 	mov.w	r5, #0
  401b3c:	f04f 0100 	mov.w	r1, #0
  401b40:	e750      	b.n	4019e4 <__adddf3+0x138>
  401b42:	bf00      	nop

00401b44 <__aeabi_i2d>:
  401b44:	f090 0f00 	teq	r0, #0
  401b48:	bf04      	itt	eq
  401b4a:	2100      	moveq	r1, #0
  401b4c:	4770      	bxeq	lr
  401b4e:	b530      	push	{r4, r5, lr}
  401b50:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401b54:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401b58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401b5c:	bf48      	it	mi
  401b5e:	4240      	negmi	r0, r0
  401b60:	f04f 0100 	mov.w	r1, #0
  401b64:	e73e      	b.n	4019e4 <__adddf3+0x138>
  401b66:	bf00      	nop

00401b68 <__aeabi_f2d>:
  401b68:	0042      	lsls	r2, r0, #1
  401b6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401b6e:	ea4f 0131 	mov.w	r1, r1, rrx
  401b72:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401b76:	bf1f      	itttt	ne
  401b78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401b7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401b84:	4770      	bxne	lr
  401b86:	f092 0f00 	teq	r2, #0
  401b8a:	bf14      	ite	ne
  401b8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b90:	4770      	bxeq	lr
  401b92:	b530      	push	{r4, r5, lr}
  401b94:	f44f 7460 	mov.w	r4, #896	; 0x380
  401b98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401ba0:	e720      	b.n	4019e4 <__adddf3+0x138>
  401ba2:	bf00      	nop

00401ba4 <__aeabi_ul2d>:
  401ba4:	ea50 0201 	orrs.w	r2, r0, r1
  401ba8:	bf08      	it	eq
  401baa:	4770      	bxeq	lr
  401bac:	b530      	push	{r4, r5, lr}
  401bae:	f04f 0500 	mov.w	r5, #0
  401bb2:	e00a      	b.n	401bca <__aeabi_l2d+0x16>

00401bb4 <__aeabi_l2d>:
  401bb4:	ea50 0201 	orrs.w	r2, r0, r1
  401bb8:	bf08      	it	eq
  401bba:	4770      	bxeq	lr
  401bbc:	b530      	push	{r4, r5, lr}
  401bbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401bc2:	d502      	bpl.n	401bca <__aeabi_l2d+0x16>
  401bc4:	4240      	negs	r0, r0
  401bc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401bca:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401bce:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401bd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401bd6:	f43f aedc 	beq.w	401992 <__adddf3+0xe6>
  401bda:	f04f 0203 	mov.w	r2, #3
  401bde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401be2:	bf18      	it	ne
  401be4:	3203      	addne	r2, #3
  401be6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401bea:	bf18      	it	ne
  401bec:	3203      	addne	r2, #3
  401bee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401bf2:	f1c2 0320 	rsb	r3, r2, #32
  401bf6:	fa00 fc03 	lsl.w	ip, r0, r3
  401bfa:	fa20 f002 	lsr.w	r0, r0, r2
  401bfe:	fa01 fe03 	lsl.w	lr, r1, r3
  401c02:	ea40 000e 	orr.w	r0, r0, lr
  401c06:	fa21 f102 	lsr.w	r1, r1, r2
  401c0a:	4414      	add	r4, r2
  401c0c:	e6c1      	b.n	401992 <__adddf3+0xe6>
  401c0e:	bf00      	nop

00401c10 <__aeabi_dmul>:
  401c10:	b570      	push	{r4, r5, r6, lr}
  401c12:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401c16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401c1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401c1e:	bf1d      	ittte	ne
  401c20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401c24:	ea94 0f0c 	teqne	r4, ip
  401c28:	ea95 0f0c 	teqne	r5, ip
  401c2c:	f000 f8de 	bleq	401dec <__aeabi_dmul+0x1dc>
  401c30:	442c      	add	r4, r5
  401c32:	ea81 0603 	eor.w	r6, r1, r3
  401c36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401c3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401c3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401c42:	bf18      	it	ne
  401c44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401c50:	d038      	beq.n	401cc4 <__aeabi_dmul+0xb4>
  401c52:	fba0 ce02 	umull	ip, lr, r0, r2
  401c56:	f04f 0500 	mov.w	r5, #0
  401c5a:	fbe1 e502 	umlal	lr, r5, r1, r2
  401c5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401c62:	fbe0 e503 	umlal	lr, r5, r0, r3
  401c66:	f04f 0600 	mov.w	r6, #0
  401c6a:	fbe1 5603 	umlal	r5, r6, r1, r3
  401c6e:	f09c 0f00 	teq	ip, #0
  401c72:	bf18      	it	ne
  401c74:	f04e 0e01 	orrne.w	lr, lr, #1
  401c78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401c7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401c80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401c84:	d204      	bcs.n	401c90 <__aeabi_dmul+0x80>
  401c86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401c8a:	416d      	adcs	r5, r5
  401c8c:	eb46 0606 	adc.w	r6, r6, r6
  401c90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401c94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401c98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401c9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401ca0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401ca4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401ca8:	bf88      	it	hi
  401caa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401cae:	d81e      	bhi.n	401cee <__aeabi_dmul+0xde>
  401cb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401cb4:	bf08      	it	eq
  401cb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401cba:	f150 0000 	adcs.w	r0, r0, #0
  401cbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401cc2:	bd70      	pop	{r4, r5, r6, pc}
  401cc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401cc8:	ea46 0101 	orr.w	r1, r6, r1
  401ccc:	ea40 0002 	orr.w	r0, r0, r2
  401cd0:	ea81 0103 	eor.w	r1, r1, r3
  401cd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401cd8:	bfc2      	ittt	gt
  401cda:	ebd4 050c 	rsbsgt	r5, r4, ip
  401cde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401ce2:	bd70      	popgt	{r4, r5, r6, pc}
  401ce4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401ce8:	f04f 0e00 	mov.w	lr, #0
  401cec:	3c01      	subs	r4, #1
  401cee:	f300 80ab 	bgt.w	401e48 <__aeabi_dmul+0x238>
  401cf2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401cf6:	bfde      	ittt	le
  401cf8:	2000      	movle	r0, #0
  401cfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401cfe:	bd70      	pople	{r4, r5, r6, pc}
  401d00:	f1c4 0400 	rsb	r4, r4, #0
  401d04:	3c20      	subs	r4, #32
  401d06:	da35      	bge.n	401d74 <__aeabi_dmul+0x164>
  401d08:	340c      	adds	r4, #12
  401d0a:	dc1b      	bgt.n	401d44 <__aeabi_dmul+0x134>
  401d0c:	f104 0414 	add.w	r4, r4, #20
  401d10:	f1c4 0520 	rsb	r5, r4, #32
  401d14:	fa00 f305 	lsl.w	r3, r0, r5
  401d18:	fa20 f004 	lsr.w	r0, r0, r4
  401d1c:	fa01 f205 	lsl.w	r2, r1, r5
  401d20:	ea40 0002 	orr.w	r0, r0, r2
  401d24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401d28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401d2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401d30:	fa21 f604 	lsr.w	r6, r1, r4
  401d34:	eb42 0106 	adc.w	r1, r2, r6
  401d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d3c:	bf08      	it	eq
  401d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d42:	bd70      	pop	{r4, r5, r6, pc}
  401d44:	f1c4 040c 	rsb	r4, r4, #12
  401d48:	f1c4 0520 	rsb	r5, r4, #32
  401d4c:	fa00 f304 	lsl.w	r3, r0, r4
  401d50:	fa20 f005 	lsr.w	r0, r0, r5
  401d54:	fa01 f204 	lsl.w	r2, r1, r4
  401d58:	ea40 0002 	orr.w	r0, r0, r2
  401d5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401d64:	f141 0100 	adc.w	r1, r1, #0
  401d68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d6c:	bf08      	it	eq
  401d6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d72:	bd70      	pop	{r4, r5, r6, pc}
  401d74:	f1c4 0520 	rsb	r5, r4, #32
  401d78:	fa00 f205 	lsl.w	r2, r0, r5
  401d7c:	ea4e 0e02 	orr.w	lr, lr, r2
  401d80:	fa20 f304 	lsr.w	r3, r0, r4
  401d84:	fa01 f205 	lsl.w	r2, r1, r5
  401d88:	ea43 0302 	orr.w	r3, r3, r2
  401d8c:	fa21 f004 	lsr.w	r0, r1, r4
  401d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d94:	fa21 f204 	lsr.w	r2, r1, r4
  401d98:	ea20 0002 	bic.w	r0, r0, r2
  401d9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401da0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401da4:	bf08      	it	eq
  401da6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401daa:	bd70      	pop	{r4, r5, r6, pc}
  401dac:	f094 0f00 	teq	r4, #0
  401db0:	d10f      	bne.n	401dd2 <__aeabi_dmul+0x1c2>
  401db2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401db6:	0040      	lsls	r0, r0, #1
  401db8:	eb41 0101 	adc.w	r1, r1, r1
  401dbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401dc0:	bf08      	it	eq
  401dc2:	3c01      	subeq	r4, #1
  401dc4:	d0f7      	beq.n	401db6 <__aeabi_dmul+0x1a6>
  401dc6:	ea41 0106 	orr.w	r1, r1, r6
  401dca:	f095 0f00 	teq	r5, #0
  401dce:	bf18      	it	ne
  401dd0:	4770      	bxne	lr
  401dd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401dd6:	0052      	lsls	r2, r2, #1
  401dd8:	eb43 0303 	adc.w	r3, r3, r3
  401ddc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401de0:	bf08      	it	eq
  401de2:	3d01      	subeq	r5, #1
  401de4:	d0f7      	beq.n	401dd6 <__aeabi_dmul+0x1c6>
  401de6:	ea43 0306 	orr.w	r3, r3, r6
  401dea:	4770      	bx	lr
  401dec:	ea94 0f0c 	teq	r4, ip
  401df0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401df4:	bf18      	it	ne
  401df6:	ea95 0f0c 	teqne	r5, ip
  401dfa:	d00c      	beq.n	401e16 <__aeabi_dmul+0x206>
  401dfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401e00:	bf18      	it	ne
  401e02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401e06:	d1d1      	bne.n	401dac <__aeabi_dmul+0x19c>
  401e08:	ea81 0103 	eor.w	r1, r1, r3
  401e0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401e10:	f04f 0000 	mov.w	r0, #0
  401e14:	bd70      	pop	{r4, r5, r6, pc}
  401e16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401e1a:	bf06      	itte	eq
  401e1c:	4610      	moveq	r0, r2
  401e1e:	4619      	moveq	r1, r3
  401e20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401e24:	d019      	beq.n	401e5a <__aeabi_dmul+0x24a>
  401e26:	ea94 0f0c 	teq	r4, ip
  401e2a:	d102      	bne.n	401e32 <__aeabi_dmul+0x222>
  401e2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401e30:	d113      	bne.n	401e5a <__aeabi_dmul+0x24a>
  401e32:	ea95 0f0c 	teq	r5, ip
  401e36:	d105      	bne.n	401e44 <__aeabi_dmul+0x234>
  401e38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401e3c:	bf1c      	itt	ne
  401e3e:	4610      	movne	r0, r2
  401e40:	4619      	movne	r1, r3
  401e42:	d10a      	bne.n	401e5a <__aeabi_dmul+0x24a>
  401e44:	ea81 0103 	eor.w	r1, r1, r3
  401e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401e4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401e50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401e54:	f04f 0000 	mov.w	r0, #0
  401e58:	bd70      	pop	{r4, r5, r6, pc}
  401e5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401e5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401e62:	bd70      	pop	{r4, r5, r6, pc}

00401e64 <__aeabi_ddiv>:
  401e64:	b570      	push	{r4, r5, r6, lr}
  401e66:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401e6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401e6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401e72:	bf1d      	ittte	ne
  401e74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401e78:	ea94 0f0c 	teqne	r4, ip
  401e7c:	ea95 0f0c 	teqne	r5, ip
  401e80:	f000 f8a7 	bleq	401fd2 <__aeabi_ddiv+0x16e>
  401e84:	eba4 0405 	sub.w	r4, r4, r5
  401e88:	ea81 0e03 	eor.w	lr, r1, r3
  401e8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401e90:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401e94:	f000 8088 	beq.w	401fa8 <__aeabi_ddiv+0x144>
  401e98:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401ea0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401ea4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401ea8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401eac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401eb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401eb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401eb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401ebc:	429d      	cmp	r5, r3
  401ebe:	bf08      	it	eq
  401ec0:	4296      	cmpeq	r6, r2
  401ec2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401ec6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401eca:	d202      	bcs.n	401ed2 <__aeabi_ddiv+0x6e>
  401ecc:	085b      	lsrs	r3, r3, #1
  401ece:	ea4f 0232 	mov.w	r2, r2, rrx
  401ed2:	1ab6      	subs	r6, r6, r2
  401ed4:	eb65 0503 	sbc.w	r5, r5, r3
  401ed8:	085b      	lsrs	r3, r3, #1
  401eda:	ea4f 0232 	mov.w	r2, r2, rrx
  401ede:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401ee2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401ee6:	ebb6 0e02 	subs.w	lr, r6, r2
  401eea:	eb75 0e03 	sbcs.w	lr, r5, r3
  401eee:	bf22      	ittt	cs
  401ef0:	1ab6      	subcs	r6, r6, r2
  401ef2:	4675      	movcs	r5, lr
  401ef4:	ea40 000c 	orrcs.w	r0, r0, ip
  401ef8:	085b      	lsrs	r3, r3, #1
  401efa:	ea4f 0232 	mov.w	r2, r2, rrx
  401efe:	ebb6 0e02 	subs.w	lr, r6, r2
  401f02:	eb75 0e03 	sbcs.w	lr, r5, r3
  401f06:	bf22      	ittt	cs
  401f08:	1ab6      	subcs	r6, r6, r2
  401f0a:	4675      	movcs	r5, lr
  401f0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401f10:	085b      	lsrs	r3, r3, #1
  401f12:	ea4f 0232 	mov.w	r2, r2, rrx
  401f16:	ebb6 0e02 	subs.w	lr, r6, r2
  401f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401f1e:	bf22      	ittt	cs
  401f20:	1ab6      	subcs	r6, r6, r2
  401f22:	4675      	movcs	r5, lr
  401f24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401f28:	085b      	lsrs	r3, r3, #1
  401f2a:	ea4f 0232 	mov.w	r2, r2, rrx
  401f2e:	ebb6 0e02 	subs.w	lr, r6, r2
  401f32:	eb75 0e03 	sbcs.w	lr, r5, r3
  401f36:	bf22      	ittt	cs
  401f38:	1ab6      	subcs	r6, r6, r2
  401f3a:	4675      	movcs	r5, lr
  401f3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401f40:	ea55 0e06 	orrs.w	lr, r5, r6
  401f44:	d018      	beq.n	401f78 <__aeabi_ddiv+0x114>
  401f46:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401f4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401f4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401f52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401f56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401f5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401f5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401f62:	d1c0      	bne.n	401ee6 <__aeabi_ddiv+0x82>
  401f64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f68:	d10b      	bne.n	401f82 <__aeabi_ddiv+0x11e>
  401f6a:	ea41 0100 	orr.w	r1, r1, r0
  401f6e:	f04f 0000 	mov.w	r0, #0
  401f72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401f76:	e7b6      	b.n	401ee6 <__aeabi_ddiv+0x82>
  401f78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f7c:	bf04      	itt	eq
  401f7e:	4301      	orreq	r1, r0
  401f80:	2000      	moveq	r0, #0
  401f82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401f86:	bf88      	it	hi
  401f88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401f8c:	f63f aeaf 	bhi.w	401cee <__aeabi_dmul+0xde>
  401f90:	ebb5 0c03 	subs.w	ip, r5, r3
  401f94:	bf04      	itt	eq
  401f96:	ebb6 0c02 	subseq.w	ip, r6, r2
  401f9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401f9e:	f150 0000 	adcs.w	r0, r0, #0
  401fa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401fa6:	bd70      	pop	{r4, r5, r6, pc}
  401fa8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401fac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401fb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401fb4:	bfc2      	ittt	gt
  401fb6:	ebd4 050c 	rsbsgt	r5, r4, ip
  401fba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401fbe:	bd70      	popgt	{r4, r5, r6, pc}
  401fc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401fc4:	f04f 0e00 	mov.w	lr, #0
  401fc8:	3c01      	subs	r4, #1
  401fca:	e690      	b.n	401cee <__aeabi_dmul+0xde>
  401fcc:	ea45 0e06 	orr.w	lr, r5, r6
  401fd0:	e68d      	b.n	401cee <__aeabi_dmul+0xde>
  401fd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401fd6:	ea94 0f0c 	teq	r4, ip
  401fda:	bf08      	it	eq
  401fdc:	ea95 0f0c 	teqeq	r5, ip
  401fe0:	f43f af3b 	beq.w	401e5a <__aeabi_dmul+0x24a>
  401fe4:	ea94 0f0c 	teq	r4, ip
  401fe8:	d10a      	bne.n	402000 <__aeabi_ddiv+0x19c>
  401fea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401fee:	f47f af34 	bne.w	401e5a <__aeabi_dmul+0x24a>
  401ff2:	ea95 0f0c 	teq	r5, ip
  401ff6:	f47f af25 	bne.w	401e44 <__aeabi_dmul+0x234>
  401ffa:	4610      	mov	r0, r2
  401ffc:	4619      	mov	r1, r3
  401ffe:	e72c      	b.n	401e5a <__aeabi_dmul+0x24a>
  402000:	ea95 0f0c 	teq	r5, ip
  402004:	d106      	bne.n	402014 <__aeabi_ddiv+0x1b0>
  402006:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40200a:	f43f aefd 	beq.w	401e08 <__aeabi_dmul+0x1f8>
  40200e:	4610      	mov	r0, r2
  402010:	4619      	mov	r1, r3
  402012:	e722      	b.n	401e5a <__aeabi_dmul+0x24a>
  402014:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402018:	bf18      	it	ne
  40201a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40201e:	f47f aec5 	bne.w	401dac <__aeabi_dmul+0x19c>
  402022:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402026:	f47f af0d 	bne.w	401e44 <__aeabi_dmul+0x234>
  40202a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40202e:	f47f aeeb 	bne.w	401e08 <__aeabi_dmul+0x1f8>
  402032:	e712      	b.n	401e5a <__aeabi_dmul+0x24a>

00402034 <__aeabi_d2iz>:
  402034:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40203c:	d215      	bcs.n	40206a <__aeabi_d2iz+0x36>
  40203e:	d511      	bpl.n	402064 <__aeabi_d2iz+0x30>
  402040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402048:	d912      	bls.n	402070 <__aeabi_d2iz+0x3c>
  40204a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40204e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402056:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40205a:	fa23 f002 	lsr.w	r0, r3, r2
  40205e:	bf18      	it	ne
  402060:	4240      	negne	r0, r0
  402062:	4770      	bx	lr
  402064:	f04f 0000 	mov.w	r0, #0
  402068:	4770      	bx	lr
  40206a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40206e:	d105      	bne.n	40207c <__aeabi_d2iz+0x48>
  402070:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402074:	bf08      	it	eq
  402076:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40207a:	4770      	bx	lr
  40207c:	f04f 0000 	mov.w	r0, #0
  402080:	4770      	bx	lr
  402082:	bf00      	nop

00402084 <__libc_init_array>:
  402084:	b570      	push	{r4, r5, r6, lr}
  402086:	4e0f      	ldr	r6, [pc, #60]	; (4020c4 <__libc_init_array+0x40>)
  402088:	4d0f      	ldr	r5, [pc, #60]	; (4020c8 <__libc_init_array+0x44>)
  40208a:	1b76      	subs	r6, r6, r5
  40208c:	10b6      	asrs	r6, r6, #2
  40208e:	bf18      	it	ne
  402090:	2400      	movne	r4, #0
  402092:	d005      	beq.n	4020a0 <__libc_init_array+0x1c>
  402094:	3401      	adds	r4, #1
  402096:	f855 3b04 	ldr.w	r3, [r5], #4
  40209a:	4798      	blx	r3
  40209c:	42a6      	cmp	r6, r4
  40209e:	d1f9      	bne.n	402094 <__libc_init_array+0x10>
  4020a0:	4e0a      	ldr	r6, [pc, #40]	; (4020cc <__libc_init_array+0x48>)
  4020a2:	4d0b      	ldr	r5, [pc, #44]	; (4020d0 <__libc_init_array+0x4c>)
  4020a4:	1b76      	subs	r6, r6, r5
  4020a6:	f000 fe3f 	bl	402d28 <_init>
  4020aa:	10b6      	asrs	r6, r6, #2
  4020ac:	bf18      	it	ne
  4020ae:	2400      	movne	r4, #0
  4020b0:	d006      	beq.n	4020c0 <__libc_init_array+0x3c>
  4020b2:	3401      	adds	r4, #1
  4020b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4020b8:	4798      	blx	r3
  4020ba:	42a6      	cmp	r6, r4
  4020bc:	d1f9      	bne.n	4020b2 <__libc_init_array+0x2e>
  4020be:	bd70      	pop	{r4, r5, r6, pc}
  4020c0:	bd70      	pop	{r4, r5, r6, pc}
  4020c2:	bf00      	nop
  4020c4:	00402d34 	.word	0x00402d34
  4020c8:	00402d34 	.word	0x00402d34
  4020cc:	00402d3c 	.word	0x00402d3c
  4020d0:	00402d34 	.word	0x00402d34

004020d4 <__itoa>:
  4020d4:	1e93      	subs	r3, r2, #2
  4020d6:	2b22      	cmp	r3, #34	; 0x22
  4020d8:	d810      	bhi.n	4020fc <__itoa+0x28>
  4020da:	2a0a      	cmp	r2, #10
  4020dc:	b510      	push	{r4, lr}
  4020de:	d006      	beq.n	4020ee <__itoa+0x1a>
  4020e0:	2300      	movs	r3, #0
  4020e2:	460c      	mov	r4, r1
  4020e4:	4419      	add	r1, r3
  4020e6:	f000 f80f 	bl	402108 <__utoa>
  4020ea:	4620      	mov	r0, r4
  4020ec:	bd10      	pop	{r4, pc}
  4020ee:	2800      	cmp	r0, #0
  4020f0:	daf6      	bge.n	4020e0 <__itoa+0xc>
  4020f2:	232d      	movs	r3, #45	; 0x2d
  4020f4:	700b      	strb	r3, [r1, #0]
  4020f6:	4240      	negs	r0, r0
  4020f8:	2301      	movs	r3, #1
  4020fa:	e7f2      	b.n	4020e2 <__itoa+0xe>
  4020fc:	2000      	movs	r0, #0
  4020fe:	7008      	strb	r0, [r1, #0]
  402100:	4770      	bx	lr
  402102:	bf00      	nop

00402104 <itoa>:
  402104:	f7ff bfe6 	b.w	4020d4 <__itoa>

00402108 <__utoa>:
  402108:	b5f0      	push	{r4, r5, r6, r7, lr}
  40210a:	f8df e078 	ldr.w	lr, [pc, #120]	; 402184 <__utoa+0x7c>
  40210e:	4616      	mov	r6, r2
  402110:	4604      	mov	r4, r0
  402112:	460f      	mov	r7, r1
  402114:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  402118:	b08b      	sub	sp, #44	; 0x2c
  40211a:	466d      	mov	r5, sp
  40211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40211e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  402122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402124:	e89e 0003 	ldmia.w	lr, {r0, r1}
  402128:	1eb3      	subs	r3, r6, #2
  40212a:	f845 0b04 	str.w	r0, [r5], #4
  40212e:	2b22      	cmp	r3, #34	; 0x22
  402130:	7029      	strb	r1, [r5, #0]
  402132:	d822      	bhi.n	40217a <__utoa+0x72>
  402134:	1e7d      	subs	r5, r7, #1
  402136:	4628      	mov	r0, r5
  402138:	2200      	movs	r2, #0
  40213a:	e000      	b.n	40213e <__utoa+0x36>
  40213c:	461a      	mov	r2, r3
  40213e:	fbb4 f1f6 	udiv	r1, r4, r6
  402142:	ab0a      	add	r3, sp, #40	; 0x28
  402144:	fb06 4411 	mls	r4, r6, r1, r4
  402148:	4423      	add	r3, r4
  40214a:	460c      	mov	r4, r1
  40214c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  402150:	f800 3f01 	strb.w	r3, [r0, #1]!
  402154:	1c53      	adds	r3, r2, #1
  402156:	2900      	cmp	r1, #0
  402158:	d1f0      	bne.n	40213c <__utoa+0x34>
  40215a:	54f9      	strb	r1, [r7, r3]
  40215c:	18bb      	adds	r3, r7, r2
  40215e:	b14a      	cbz	r2, 402174 <__utoa+0x6c>
  402160:	7819      	ldrb	r1, [r3, #0]
  402162:	7868      	ldrb	r0, [r5, #1]
  402164:	f805 1f01 	strb.w	r1, [r5, #1]!
  402168:	3401      	adds	r4, #1
  40216a:	1b11      	subs	r1, r2, r4
  40216c:	428c      	cmp	r4, r1
  40216e:	f803 0901 	strb.w	r0, [r3], #-1
  402172:	dbf5      	blt.n	402160 <__utoa+0x58>
  402174:	4638      	mov	r0, r7
  402176:	b00b      	add	sp, #44	; 0x2c
  402178:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40217a:	2000      	movs	r0, #0
  40217c:	7038      	strb	r0, [r7, #0]
  40217e:	b00b      	add	sp, #44	; 0x2c
  402180:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402182:	bf00      	nop
  402184:	00402d00 	.word	0x00402d00

00402188 <register_fini>:
  402188:	4b02      	ldr	r3, [pc, #8]	; (402194 <register_fini+0xc>)
  40218a:	b113      	cbz	r3, 402192 <register_fini+0xa>
  40218c:	4802      	ldr	r0, [pc, #8]	; (402198 <register_fini+0x10>)
  40218e:	f000 b805 	b.w	40219c <atexit>
  402192:	4770      	bx	lr
  402194:	00000000 	.word	0x00000000
  402198:	004021a9 	.word	0x004021a9

0040219c <atexit>:
  40219c:	2300      	movs	r3, #0
  40219e:	4601      	mov	r1, r0
  4021a0:	461a      	mov	r2, r3
  4021a2:	4618      	mov	r0, r3
  4021a4:	f000 b81e 	b.w	4021e4 <__register_exitproc>

004021a8 <__libc_fini_array>:
  4021a8:	b538      	push	{r3, r4, r5, lr}
  4021aa:	4c0a      	ldr	r4, [pc, #40]	; (4021d4 <__libc_fini_array+0x2c>)
  4021ac:	4d0a      	ldr	r5, [pc, #40]	; (4021d8 <__libc_fini_array+0x30>)
  4021ae:	1b64      	subs	r4, r4, r5
  4021b0:	10a4      	asrs	r4, r4, #2
  4021b2:	d00a      	beq.n	4021ca <__libc_fini_array+0x22>
  4021b4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4021b8:	3b01      	subs	r3, #1
  4021ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4021be:	3c01      	subs	r4, #1
  4021c0:	f855 3904 	ldr.w	r3, [r5], #-4
  4021c4:	4798      	blx	r3
  4021c6:	2c00      	cmp	r4, #0
  4021c8:	d1f9      	bne.n	4021be <__libc_fini_array+0x16>
  4021ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4021ce:	f000 bdb5 	b.w	402d3c <_fini>
  4021d2:	bf00      	nop
  4021d4:	00402d4c 	.word	0x00402d4c
  4021d8:	00402d48 	.word	0x00402d48

004021dc <__retarget_lock_acquire_recursive>:
  4021dc:	4770      	bx	lr
  4021de:	bf00      	nop

004021e0 <__retarget_lock_release_recursive>:
  4021e0:	4770      	bx	lr
  4021e2:	bf00      	nop

004021e4 <__register_exitproc>:
  4021e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4021e8:	4d2c      	ldr	r5, [pc, #176]	; (40229c <__register_exitproc+0xb8>)
  4021ea:	4606      	mov	r6, r0
  4021ec:	6828      	ldr	r0, [r5, #0]
  4021ee:	4698      	mov	r8, r3
  4021f0:	460f      	mov	r7, r1
  4021f2:	4691      	mov	r9, r2
  4021f4:	f7ff fff2 	bl	4021dc <__retarget_lock_acquire_recursive>
  4021f8:	4b29      	ldr	r3, [pc, #164]	; (4022a0 <__register_exitproc+0xbc>)
  4021fa:	681c      	ldr	r4, [r3, #0]
  4021fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402200:	2b00      	cmp	r3, #0
  402202:	d03e      	beq.n	402282 <__register_exitproc+0x9e>
  402204:	685a      	ldr	r2, [r3, #4]
  402206:	2a1f      	cmp	r2, #31
  402208:	dc1c      	bgt.n	402244 <__register_exitproc+0x60>
  40220a:	f102 0e01 	add.w	lr, r2, #1
  40220e:	b176      	cbz	r6, 40222e <__register_exitproc+0x4a>
  402210:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402214:	2401      	movs	r4, #1
  402216:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40221a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40221e:	4094      	lsls	r4, r2
  402220:	4320      	orrs	r0, r4
  402222:	2e02      	cmp	r6, #2
  402224:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402228:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40222c:	d023      	beq.n	402276 <__register_exitproc+0x92>
  40222e:	3202      	adds	r2, #2
  402230:	f8c3 e004 	str.w	lr, [r3, #4]
  402234:	6828      	ldr	r0, [r5, #0]
  402236:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40223a:	f7ff ffd1 	bl	4021e0 <__retarget_lock_release_recursive>
  40223e:	2000      	movs	r0, #0
  402240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402244:	4b17      	ldr	r3, [pc, #92]	; (4022a4 <__register_exitproc+0xc0>)
  402246:	b30b      	cbz	r3, 40228c <__register_exitproc+0xa8>
  402248:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40224c:	f3af 8000 	nop.w
  402250:	4603      	mov	r3, r0
  402252:	b1d8      	cbz	r0, 40228c <__register_exitproc+0xa8>
  402254:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402258:	6002      	str	r2, [r0, #0]
  40225a:	2100      	movs	r1, #0
  40225c:	6041      	str	r1, [r0, #4]
  40225e:	460a      	mov	r2, r1
  402260:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402264:	f04f 0e01 	mov.w	lr, #1
  402268:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40226c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402270:	2e00      	cmp	r6, #0
  402272:	d0dc      	beq.n	40222e <__register_exitproc+0x4a>
  402274:	e7cc      	b.n	402210 <__register_exitproc+0x2c>
  402276:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40227a:	430c      	orrs	r4, r1
  40227c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402280:	e7d5      	b.n	40222e <__register_exitproc+0x4a>
  402282:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402286:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40228a:	e7bb      	b.n	402204 <__register_exitproc+0x20>
  40228c:	6828      	ldr	r0, [r5, #0]
  40228e:	f7ff ffa7 	bl	4021e0 <__retarget_lock_release_recursive>
  402292:	f04f 30ff 	mov.w	r0, #4294967295
  402296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40229a:	bf00      	nop
  40229c:	20400450 	.word	0x20400450
  4022a0:	00402cfc 	.word	0x00402cfc
  4022a4:	00000000 	.word	0x00000000

004022a8 <sysfont_glyphs>:
	...
  4022c8:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  4022d8:	00000030 00000000 00000000 006c006c     0...........l.l.
  4022e8:	006c006c 00000000 00000000 00000000     l.l.............
	...
  402300:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  402310:	00000028 00000000 00000000 003c0010     (.............<.
  402320:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  402338:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  402348:	00000088 00000000 00000000 00900060     ............`...
  402358:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  402370:	00100010 00000010 00000000 00000000     ................
	...
  40238c:	00100008 00200020 00200020 00200020     .... . . . . . .
  40239c:	00080010 00000000 00000000 00100020     ............ ...
  4023ac:	00080008 00080008 00080008 00200010     .............. .
  4023bc:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  4023e4:	00100010 00fe0010 00100010 00000010     ................
	...
  40240c:	00300010 00000020 00000000 00000000     ..0. ...........
  40241c:	00000000 007c0000 00000000 00000000     ......|.........
	...
  402440:	00300000 00000030 00000000 00000000     ..0.0...........
  402450:	00080000 00100008 00200010 00400020     .......... . .@.
  402460:	00000040 00000000 00000000 00780000     @.............x.
  402470:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  402488:	00100000 00500030 00100010 00100010     ....0.P.........
  402498:	0000007c 00000000 00000000 00700000     |.............p.
  4024a8:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  4024c0:	00700000 00080088 00080030 00880008     ..p.....0.......
  4024d0:	00000070 00000000 00000000 00080000     p...............
  4024e0:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  4024f8:	00780000 00800080 000800f0 00080008     ..x.............
  402508:	000000f0 00000000 00000000 00300000     ..............0.
  402518:	00800040 008800f0 00880088 00000070     @...........p...
	...
  402530:	00f80000 00100008 00200010 00400020     .......... . .@.
  402540:	00000040 00000000 00000000 00700000     @.............p.
  402550:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  402568:	00700000 00880088 00780088 00100008     ..p.......x.....
  402578:	00000060 00000000 00000000 00000000     `...............
  402588:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  4025a4:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  4025b4:	00000040 00000000 00000000 00100008     @...............
  4025c4:	00400020 00100020 00000008 00000000      .@. ...........
	...
  4025e0:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  4025f8:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  402610:	00300000 00080048 00200010 00000000     ..0.H..... .....
  402620:	00000020 00000000 00000000 00000000      ...............
  402630:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  402648:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  402658:	00000044 00000000 00000000 00f80000     D...............
  402668:	00840084 008400f8 00840084 000000f8     ................
	...
  402680:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  402690:	0000003c 00000000 00000000 00f00000     <...............
  4026a0:	00840088 00840084 00880084 000000f0     ................
	...
  4026b8:	00f80000 00800080 008000f0 00800080     ................
  4026c8:	000000f8 00000000 00000000 00f80000     ................
  4026d8:	00800080 008000f8 00800080 00000080     ................
	...
  4026f0:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  402700:	00000038 00000000 00000000 00880000     8...............
  402710:	00880088 008800f8 00880088 00000088     ................
	...
  402728:	00f80000 00200020 00200020 00200020     .... . . . . . .
  402738:	000000f8 00000000 00000000 00f80000     ................
  402748:	00080008 00080008 00080008 000000f0     ................
	...
  402760:	00840000 00900088 00d000a0 00840088     ................
  402770:	00000084 00000000 00000000 00800000     ................
  402780:	00800080 00800080 00800080 000000fc     ................
	...
  402798:	00840000 00cc00cc 00b400b4 00840084     ................
  4027a8:	00000084 00000000 00000000 00840000     ................
  4027b8:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  4027d0:	00780000 00840084 00840084 00840084     ..x.............
  4027e0:	00000078 00000000 00000000 00f80000     x...............
  4027f0:	00840084 00f80084 00800080 00000080     ................
	...
  402808:	00780000 00840084 00840084 00840084     ..x.............
  402818:	00200078 00000018 00000000 00f80000     x. .............
  402828:	00840084 00f80084 00840088 00000084     ................
	...
  402840:	007c0000 00800080 00180060 00040004     ..|.....`.......
  402850:	000000f8 00000000 00000000 00f80000     ................
  402860:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  402878:	00840000 00840084 00840084 00840084     ................
  402888:	00000078 00000000 00000000 00840000     x...............
  402898:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4028b0:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4028c0:	00000050 00000000 00000000 00880000     P...............
  4028d0:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  4028e8:	00880000 00880088 00500050 00200020     ........P.P. . .
  4028f8:	00000020 00000000 00000000 00fc0000      ...............
  402908:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  402920:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  402930:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  402940:	00200020 00100020 00100010 00080008      . . ...........
	...
  402958:	00080038 00080008 00080008 00080008     8...............
  402968:	00080008 00000038 00000000 00280010     ....8.........(.
  402978:	00000044 00000000 00000000 00000000     D...............
	...
  4029a0:	00000038 00000000 00000000 00200000     8............. .
  4029b0:	00000010 00000000 00000000 00000000     ................
	...
  4029cc:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  4029e4:	00800080 00f80080 00840084 00840084     ................
  4029f4:	000000f8 00000000 00000000 00000000     ................
  402a04:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402a1c:	00040004 007c0004 00840084 008c0084     ......|.........
  402a2c:	00000074 00000000 00000000 00000000     t...............
  402a3c:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  402a54:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  402a64:	000000fc 00000000 00000000 00000000     ................
  402a74:	007c0000 00840084 00840084 0004007c     ..|.........|...
  402a84:	00000078 00000000 00800080 00b80080     x...............
  402a94:	008400c4 00840084 00000084 00000000     ................
  402aa4:	00000000 00100000 00700000 00100010     ..........p.....
  402ab4:	00100010 0000007c 00000000 00000000     ....|...........
  402ac4:	00080000 00780000 00080008 00080008     ......x.........
  402ad4:	00080008 00700008 00000000 00800080     ......p.........
  402ae4:	00880080 00a00090 008800d0 00000088     ................
	...
  402afc:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402b0c:	000000f8 00000000 00000000 00000000     ................
  402b1c:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402b38:	00b80000 008400c4 00840084 00000084     ................
	...
  402b54:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  402b70:	00b80000 008400c4 00840084 008000f8     ................
  402b80:	00000080 00000000 00000000 007c0000     ..............|.
  402b90:	00840084 00840084 0004007c 00000004     ........|.......
	...
  402ba8:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  402bc4:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  402be0:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402bfc:	00880000 00880088 00880088 0000007c     ............|...
	...
  402c18:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402c34:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402c50:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  402c6c:	00840000 00480084 00300048 00200010     ......H.H.0... .
  402c7c:	00000040 00000000 00000000 00f80000     @...............
  402c8c:	00100008 00400020 000000f8 00000000     .... .@.........
  402c9c:	00000000 00200010 00100020 00200020     ...... . ... . .
  402cac:	00200010 00100020 00000000 00000000     .. . ...........
  402cbc:	00100010 00100010 00000000 00100010     ................
  402ccc:	00100010 00000000 00000000 00100020     ............ ...
  402cdc:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402cec:	00000000 0000006a 0000006b 0000003a     ....j...k...:...

00402cfc <_global_impure_ptr>:
  402cfc:	20400028 33323130 37363534 62613938     (.@ 0123456789ab
  402d0c:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
  402d1c:	76757473 7a797877 00000000              stuvwxyz....

00402d28 <_init>:
  402d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d2a:	bf00      	nop
  402d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d2e:	bc08      	pop	{r3}
  402d30:	469e      	mov	lr, r3
  402d32:	4770      	bx	lr

00402d34 <__init_array_start>:
  402d34:	00402189 	.word	0x00402189

00402d38 <__frame_dummy_init_array_entry>:
  402d38:	00400165                                e.@.

00402d3c <_fini>:
  402d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d3e:	bf00      	nop
  402d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d42:	bc08      	pop	{r3}
  402d44:	469e      	mov	lr, r3
  402d46:	4770      	bx	lr

00402d48 <__fini_array_start>:
  402d48:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 22a8 0040 0e0a 7d20               ....."@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <flag_led0>:
20400020:	0001 0000 0000 0000                         ........

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	070c 2040                                   ..@ 
